# ! ####################################################################################
# ! Configuration file for 3x2pt RR2 covariance. Some caveats:
# ! - double-check the cosmology and the value of HMCode_logT_AGN
# ! - there is no dz shift, magnification bias, galaxy bias(check polynomial coeffs), m-bias and rsds
# !   for the moment
# ! - You should compute simgma_eps and n_eff from the catalogues using Laila's function
# ! - The input Cls should be the theoretical, (ideally unbinned, otherwise finely binned) *decoupled* Cls
# ! - log ell binning could be problematic for the partial-sky (decoupled) covariance

# ! tip: for testing purposes, the spin0 approximation (in the namaster cfg section) seems to work well
# !      and speeds up the computation quite a lot
# ! tip: from v2027.07.0 you can input the n(z) and the Cls directly in the euclidlib format
# ! tip: from v2027.07.0 you can smooth the n(z) distribution at runtime
# ! tip: from v2027.07.0 you can save the plots in the output folder (check 'misc')
# ! ####################################################################################

# Example configuration file for Spaceborne. A further explanation of the different
# options can be found in the official documentation, at https://spaceborne.readthedocs.io/en/latest/
# The type of the different values is given in the comments, and is checked at runtime.
# Note: When not on the same line, comments always refer to the option/section immediately below.
# Note: `None` is `null` in YAML

cosmology:
    Om: 0.3190013037528519 # Type: float. Total matter density parameter Omega_m, at z=0
    Ob: 0.049 # Type: float. Baryonic density parameter Omega_b, at z=0
    wz: -1.0 # Type: float. Dark energy equation of state parameter (w0)
    wa: 0.0 # Type: float. Evolution of the dark energy equation of state parameter
    h: 0.67 # Type: float. Dimensionless Hubble parameter (H0 / 100)
    ns: 0.96 # Type: float. Scalar spectral index of the primordial power spectrum
    s8: 0.816 # Type: float. Amplitude of matter density fluctuations on 8 Mpc/h scales
    ODE: 0.68 # Type: float. Dark energy density parameter Omega_DE, at z=0
    m_nu: 0.06 # Type: float. Total mass of neutrinos in eV
    N_eff: 3.046 # Type: float. Effective number of relativistic species
    Om_k0: 0 # Type: float. Curvature density parameter Omega_k, at z=0

intrinsic_alignment:
    Aia: 0.0 # Type: float.
    eIA: 0.0 # Type: float. \eta_{IA}
    bIA: 0.0 # Type: float. \beta_{IA}
    CIA: 0.0134 # Type: float.
    z_pivot_IA: 0 # Type: float.
    lumin_ratio_filename: null # Type: str | None. null if not used, otherwise path to the file

# extra parameters to be passed to CCL cosmo object, eg CAMB extra parameters
# (see https://ccl.readthedocs.io/en/latest/api/pyccl.cosmology.html#pyccl.cosmology.Cosmology
# for the different options)
extra_parameters:
    camb:
        halofit_version: mead2020_feedback # Type: str
        kmax: 100 # Type: float | int
        HMCode_logT_AGN: 7.8 # Type: float
        num_massive_neutrinos: 1 # Type: int
        dark_energy_model: ppf # Type: str

# Halo model configuration using CCL classes (https://ccl.readthedocs.io/en/latest/api/pyccl.halos.html)
# Each parameter maps directly to a CCL class, and has exactly its name
halo_model:
    mass_def: MassDef200m # Type: str
    concentration: ConcentrationDuffy08 # Type: str
    mass_function: MassFuncTinker10 # Type: str
    halo_bias: HaloBiasTinker10 # Type: str
    halo_profile_dm: HaloProfileNFW # Type: str. 'dm' = 'dark matter'
    halo_profile_hod: HaloProfileHOD # Type: str.

# [NOTE: NOT IMPLEMENTED YET]
probe_selection:
    LL: True # Type: str. Whether to compute the weak lensing ('LL') covariance
    GL: True # Type: str. Whether to compute the galaxy-galaxy lensing ('GL') covariance
    GG: True # Type: str. Whether to compute the photometric clustering ('GG') covariance
    cross_cov: True # Type: str. Whether to compute the cross-terms between the selected probes

C_ell:
    # Whether or not to read user-provided Cls for the computation of the Gaussian covariance.
    # These should be the theoretical, decoupled Cls.
    # Note: the multiplicative shear bias specified below will NOT be applied to the input Cls.
    # Note: if the non-Gaussian covariance is requested, the code will compute intermediate quantities
    # such as the radial kernels for lensing and clustering. The user should make sure that the cosmology
    # and n(z) used to generate the input Cls and the ones specified in this cfg file are compatible.
    # The Cls should be passed in a .txt, .dat or .ascii file with columns corresponding to
    # ell, zi, zj, Cl[ell, zi, zj]
    # with `ell` the ell value, zi the i-th tomographic bin index, and zj the j-th tomographic bin index.
    # The Cls are then splined along the \ell axis and interpolated over the \ell values specified in the "ell_binning"
    # section of this cfg file.
    use_input_cls: True # Type: bool
    cl_LL_path: /home/davide/Documenti/Lavoro/Programmi/common_data/RR2/Guada/theory-spectra-unconvolved-unbinned.fits # Type: str. Path to the shear-shear angular PS.
    cl_GL_path: /home/davide/Documenti/Lavoro/Programmi/common_data/RR2/Guada/theory-spectra-unconvolved-unbinned.fits # Type: str. Path to the galaxy-shear angular PS.
    cl_GG_path: /home/davide/Documenti/Lavoro/Programmi/common_data/RR2/Guada/theory-spectra-unconvolved-unbinned.fits # Type: str. Path to the galaxy-galaxy angular PS.

    # Which galaxy and magnification bias to use. Options:
    # - 'from_input': read the bias from the files specified in 'gal_bias_table_filename' and 'mag_bias_table_filename'.
    # - 'FS2_polynomial_fit': use the third-order polynomial fits to the galaxy and magnification bias from Flagship 2.
    #                         The actual values of these coefficients can be changed by modifying the values of
    #                         'galaxy_bias_fit_coeff' and 'magnification_bias_fit_coeff'.
    which_gal_bias: "FS2_polynomial_fit" # Type: str.
    which_mag_bias: "FS2_polynomial_fit" # Type: str.

    # Coefficients of the third-order polynomial galaxy and magnification bias.
    # The order is [z^0, z^1, z^2, z^3], so to set a constant galaxy bias for all redshifts,
    # and for all redshift bins you can simply set it to [x, 0, 0, 0]; x=1 will give the unbiased case.
    # galaxy_bias_fit_coeff: [1.33291, -0.72414, 1.0183, -0.14913] # Type: list[float]
    galaxy_bias_fit_coeff: [1, 0, 0, 0] # Type: list[float]
    magnification_bias_fit_coeff: [-1.50685, 1.35034, 0.08321, 0.04279] # Type: list[float]

    # Input files for the galaxy and magnification bias. Should have shape (nz_points, zbins + 1), and sufficient
    # redshift support. These files are only used if `which_gal_bias` or `which_mag_bias` are set to 'from_input'.
    gal_bias_table_filename: /home/davide/Documenti/Lavoro/Programmi/common_data/RR2/gal_bias.txt # Type: str
    mag_bias_table_filename: /home/davide/Documenti/Lavoro/Programmi/common_data/RR2/mag_bias.txt # Type: str

    # Multiplicative shear bias per redshift bin.
    # This is NOT applied to the input Cls, in case they are provided.
    mult_shear_bias: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0] # Type: list[float]

    # Boolean flags for redshift-space distortions, intrinsic alignment and magnification bias
    has_rsd: False # Type: bool. Enable/disable redshift-space distortions.
    has_IA: False # Type: bool. Enable/disable intrinsic alignment.
    has_magnification_bias: False # Type: bool. Enable/disable magnification bias.

    # Keyword arguments for CCL Cl calculation (excluding `p_of_k_a`), described in
    # https://ccl.readthedocs.io/en/latest/api/pyccl.cosmology.html#pyccl.cosmology.Cosmology.angular_cl
    cl_CCL_kwargs:
        l_limber: -1 # Type: int
        limber_integration_method: spline # Type: str
        non_limber_integration_method: FKEM # Type: str

nz:
    # Paths to source (for WL) and lens (for GCph) redshift distributions.
    # These must have shape (z_points, zbins + 1)
    nz_sources_filename: /home/davide/Documenti/Lavoro/Programmi/common_data/RR2/Guada/Reg2_SHE_tombins_unitweights_nz_SOMbin_C2020z.fits # Type: str
    nz_lenses_filename: /home/davide/Documenti/Lavoro/Programmi/common_data/RR2/Guada/Reg2_POS_tombins_unitweights_nz_SOMbin_C2020z.fits # Type: str

    # Number of galaxies per arcmin**2 for each redshift bin.
    # Should be of length 'zbins'
    # TODO get actual values
    ngal_sources: [2.1279869461396435, 2.8237964415236063, 2.564394831195362, 1.2930977380060946, 0.4702026378518463, 0.1069525663290778] # Type: list[float]
    ngal_lenses: [2.87799343223134, 2.098809385748583, 1.8471870250265632, 1.3455375854538179, 0.36423337434626685, 0.09234518996285011] # Type: list[float]

    # [NOTE] while it can convenient to manipulate the n(z) at runtime, to guarantee consistent results, it is
    #        generally better to perform all of these steps outside of Spaceborne and to avoid any
    #        modification to the n(z) by setting shift_nz and smooth_nz to False.
    # [NOTE] The cuts defined by clip_zmin/zmax are only applied if shift_nz is True
    shift_nz: False # Type: bool. Whether to shift the redshift distributions as n_i(z) -> n_i(z - dz_i)
    dzWL: [-0.008848, 0.051368, 0.059484, -0.008848, 0.051368, 0.059484] # Type: list[float]. Per-bin shifts for WL (sources). Should be of length 'zbins'
    dzGC: [-0.008848, 0.051368, 0.059484, -0.008848, 0.051368, 0.059484] # Type: list[float]. Per-bin shifts for GCph (lenses). Should be of length 'zbins'
    normalize_shifted_nz: True # Type: bool. Whether to normalize the shifted n(z) distributions
    clip_zmin: 0 # Type: float. Minimum redshift to clip (cut) the shifted n_i(z) distributions
    clip_zmax: 3 # Type: float. Maximum redshift to clip (cut) the shifted n_i(z) distributions

    smooth_nz: False # Type: bool. Whether to smooth the input redshift distributions with a Gaussian kernel
    sigma_smoothing: 10 # Type: int | float. Standard deviation of the Gaussian kernel.

mask:
    load_mask: True # Type: bool. Whether to load the mask from a fits or npy file
    mask_path: /home/davide/Documenti/Lavoro/Programmi/common_data/RR2/Davide/EUC_LE3_COVERAGE_RR2-R1-TEST_20250519T100352.127658Z_00.00.fits.gz # Type: str. Path to the mask file (.FITS or .npy)
    generate_polar_cap: False # Type: bool. Whether to generate a polar cap mask on the fly.

    # Desired nside of the polar cap, or nside to which up/downgrade the reslution of the input mask.
    # If null (None), the nside of the input mask will be used, without up/downgrading.
    nside: 1024 # Type: int | None.

    # Note that the given survey area will only be used if generate_polar_cap is True.
    # Otherwise, the area of the input mask will be used.
    # If you want to compute the full-sky covariance, then set this to the
    # full-sky area (within 1% of 41252.96124941928), and set load_mask and apodize to
    # False.
    survey_area_deg2: 13245 # Type: int

    apodize: False # Type: bool
    aposize: 0.1 # Type: float. Apodization scale in deg

ell_binning:
    binning_type: "log" # Type: str. Options: ['log', 'lin', 'unbinned', 'ref_cut']

    ell_min_WL: 10 # Type: int. Minimum ell for WL
    ell_max_WL: 1500 # Type: int. Maximum ell for WL
    ell_bins_WL: 32 # Type: int. Number of bins for WL. Not used in the 'unbinned' and 'ref_cut' cases

    ell_min_GC: 10 # Type: int. Minimum ell for GC
    ell_max_GC: 1500 # Type: int. Maximum ell for GC
    ell_bins_GC: 32 # Type: int. Number of bins for GC. Not used in the 'unbinned' and 'ref_cut' cases

    # ell binning for the reference case; only a subset of these bins, depending on the
    # desired ell range of WL and GC, will be used in the 'ref_cut' case.
    ell_min_ref: 10 # Type: int. Minimum ell for reference case
    ell_max_ref: 1500 # Type: int. Maximum ell for reference case
    ell_bins_ref: 32 # Type: int. Number of bins for reference case

BNT:
    cl_BNT_transform: False # Type: bool. Whether to BNT-transform the Cls
    cov_BNT_transform: False # Type: bool. Whether to BNT-transform the covariance

covariance:
    G: True # Type: bool. Enable/disable the Gaussian covariance term.
    SSC: False # Type: bool. Enable/disable the super-sample covariance (SSC) term
    cNG: False # Type: bool. Enable/disable the connected non-Gaussian (cNG) covariance term

    coupled_cov: True # Type: bool. Whether to compute the covariance of the coupled or decoupled Cls

    # Choose whether to use the upper ('triu') or lower ('tril') triangle
    # of the auto-probe (LL, GG) zbins (C_{ij}(\ell)^AA = C_{ji}(\ell)^AA).
    triu_tril: triu # Type: str. Options: ['triu', 'tril']

    # Within the upper or lower triangle, count indices in
    # a row-major or column-major order.
    row_col_major: row-major # Type: str. Options: ['row-major', 'column-major']
    # Determines the ordering of the covariance matrix in 2D, with the outermost
    # loop corresponding to the leftmost index.
    # Options: [ell_probe_zpair, probe_ell_zpair, probe_zpair_ell, zpair_probe_ell]
    # Examples:
    # - ell_probe_zpair: Ordered by multipole (ell), then probe type, then redshift pair.
    # - probe_ell_zpair: Ordered by probe type, then multipole (ell), then redshift pair. This is the ordering used by CLOE
    covariance_ordering_2D: probe_ell_zpair # Type: str.

    # Whether to save the full 6D covariance matrix, without to any indices compression or reshaping.
    # In the case of the single probes, this is an array of shape
    # (ell_bins, ell_bins, zbins, zbins, zbins, zbins).
    save_full_cov: False # Type: bool

    # Whether to save the covariance matrix as a euclidlib-compatible .fits file
    # [NOTE: NOT IMPLEMENTED YET]
    save_cov_euclidlib_fmt: False # Type: bool

    # Whether to split the Gaussian covariance term into the
    # sample variance (SVA), sampling noise (SN) and mixed (MIX) terms
    split_gaussian_cov: False # Type: bool

    # Ellipticity dispersion *per component* = sigma_eps_i.
    # total ellipticity dispersion = sigma_eps
    # sigma_eps = (sigma_eps_i * np.sqrt(2))
    # Should be of length 'zbins'
    # TODO get actual values
    sigma_eps_i: [0.2622497313110638, 0.2633852240634032, 0.24754310628764617, 0.2326297440704344, 0.22633031526404115, 0.25061916023249875] # Type: list[float]


    # Whether to include the noise power spectra in the computation of the
    # Gaussian covariance matrix.
    no_sampling_noise: False # Type: bool

    which_pk_responses: halo_model # Type: str. Options: ['halo_model', 'separate_universe']

    # Which first-order galaxy bias to use in the computation of the counterterms for the gm and gg responses.
    # Can be one of:
    # - 'from_HOD' (from the Halo Occupation Distribution previously initialized)
    # - 'from_input' (from the input tabulated galaxy bias values)/FS2 fit computed in SB
    which_b1g_in_resp: from_input # Type: str. Options: ['from_HOD', 'from_input']

    # Whether or not to include the second-order galaxy bias in the GCph SU responses
    include_b2g: True # Type: bool

    # Whether or not to include the additional terms of Terasawa et al [arXiv:2310.13330] in the halo model responses
    include_terasawa_terms: False # Type: bool

    # Integration scheme used for the SSC survey covariance (sigma2_b) computation. Options:
    # - 'simps': uses simpson integration. This is faster but less accurate
    # - 'levin': uses levin integration. This is slower but more accurate
    sigma2_b_integration_scheme: levin # Type: str.
    load_cached_sigma2_b: False # Type: bool. Whether to load the previously computed sigma2_b.

    # k grid used for power spectrum and trispectrum computation
    log10_k_min: -5 # Type: float
    log10_k_max: 2 # Type: float
    k_steps: 200 # Type: int. Around 100 should be enough

    z_min: 0.02 # Type: float.
    z_max: 3.0 # Type: float
    z_steps: 5000 # Type: int. Number of z steps used for the NG covariance projection. Should be quite high, e.g. 7000
    z_steps_trisp: 100 # Type: int. Number of z steps used to compute the trispectrum - around 50 should be enough

    use_KE_approximation: False # Type: bool. Whether or not to use the single-redshift integral approximation for the SSC

    # Name of the output covariance file. Change suffix to '.npy' to save as npy file.
    cov_filename: cov_{which_ng_cov:s}_{probe:s}_{ndim}.npz # Type: str.

namaster:
    use_namaster: True # Type: bool. Whether to use Namaster to compute the partial-sky Gaussian covariance
    spin0: True # Type: bool. Whether to approximate the shear field as a spin-0 field (faster but less accurate)
    use_INKA: True # Type: bool. Whether to use the improved Narrow Kernel Approximation (recommended)
    workspace_path: ... # Type: str. Path to the workspace, if already computed

sample_covariance:
    compute_sample_cov: False # Type: bool

    # Which code to use to compute the coupled Cls on the masked maps. The results are
    # essentially equivalent, but 'namaster' is a bit faster than 'healpy'.
    # In case the decoupled (sample) covariance is requested, for both choiches the
    # workspace.decouple_cell() function will be used.
    # Documentation:
    # https://namaster.readthedocs.io/en/latest/api/pymaster.workspaces.html#pymaster.workspaces.NmtWorkspaceFlat.decouple_cell
    # Options: ['namaster', 'healpy'].
    which_cls: namaster # Type: str.

    nreal: 5000 # Type: int. Number of realizations for the sample covariance matrix
    fix_seed: True # Type: bool. Whether to fix the random seed for reproducible results

PyCCL:
    # (from CCL docs): integration method to be used for the Limber integrals.
    # Options:
    # - 'qag_quad' (GSL's qag method backed up by quad when it fails)
    # - 'spline' (the integrand is splined and then integrated analytically).
    # DSnote: note that the former could give errors.
    cov_integration_method: spline # Type: str

    # Whether or not to load the previously computed trispectrum.
    load_cached_tkka: True # Type: bool.

    # Whether or not to use the default k and a grids used in CCL.
    # Setting this to True will make the computation of the cNG trispectrum slower
    # with respect to the default values.
    use_default_k_a_grids: False

    # (from CCL docs): number of points over which to compute the radial kernels (weight functions).
    # See e.g. documentation of https://ccl.readthedocs.io/en/latest/api/pyccl.tracers.html#pyccl.tracers.NumberCountsTracer
    n_samples_wf: 1000 # Type: int

    # precision parameters for splines and numerical integration, described in
    # https://ccl.readthedocs.io/en/latest/source/notation_and_other_cosmological_conventions.html#controlling-splines-and-numerical-accuracy.
    spline_params: # Type: dict | None
        A_SPLINE_NA_PK: 240 # Type: int
        K_MAX_SPLINE: 300 # Type: int
    gsl_params: null # Type: dict | None

precision:
    # Number of iterations when computing the alms of the input map. See
    # see https://namaster.readthedocs.io/en/latest/api/pymaster.field.html#pymaster.field.NmtField
    n_iter_nmt: null # Type: None | int.

misc:
    num_threads: 50 # Type: int. How many threads to use for the parallel computations

    # How many integrals to compute at once for the  numerical integration of
    # the sigma^2_b(z_1, z_2) function with pylevin.
    # IMPORTANT NOTE: in case of memory issues, (i.e., if you notice the code crashing
    # while computing sigma2_b), decrease this or num_threads.
    levin_batch_size: 1000 # Type: int.

    # some sanity checks on the covariance matrix. These could take a while to run.
    test_numpy_inversion: True # Type: bool. Test for errors in np.linalg.inv
    test_condition_number: True # Type: bool. Check if condition number is above 1e10
    test_cholesky_decomposition: True # Type: bool. Test if cholesky decomposition fails
    test_symmetry: True # Type: bool. Test if covariance matrix is symmetric (cov = cov.T)

    output_path: /home/davide/Documenti/Lavoro/Programmi/common_data/Spaceborne_jobs/RR2_cov/output # Type: str. Path to the output directory

# Example configuration file for Spaceborne. A further explanation of the different
# options can be found in the official documentation, at https://spaceborne.readthedocs.io/en/latest/
# The type of the different values is given in the comments, and is checked at runtime.
# Note: When not on the same line, comments always refer to the option/section immediately below.
# Note: `None` is `null` in YAML
# Note: Be careful when using scientific notation: in YAML, `1e-5` is a string, `1.e-5` is a float

# ROOTS:
# pleiadi: /_u/dsciotti/code
# local: /_home/davide/Documenti/Lavoro/Programmi
# melodie: /_home/cosmo/davide.sciotti/data

cosmology:
  Om: 0.32 # Type: float. Total matter density parameter Omega_m, at z=0
  Ob: 0.05 # Type: float. Baryonic density parameter Omega_b, at z=0
  wz: -1.0 # Type: float. Dark energy equation of state parameter (w0)
  wa: 0.0 # Type: float. Evolution of the dark energy equation of state parameter
  h: 0.6737 # Type: float. Dimensionless Hubble parameter (H0 / 100)
  ns: 0.966 # Type: float. Scalar spectral index of the primordial power spectrum
  s8: 0.816 # Type: float. Amplitude of matter density fluctuations on 8 Mpc/h scales
  ODE: 0.68 # Type: float. Dark energy density parameter Omega_DE, at z=0
  m_nu: 0.06 # Type: float. Total mass of neutrinos in eV
  N_eff: 3.046 # Type: float. Effective number of relativistic species
  Om_k0: 0.0 # Type: float. Curvature density parameter Omega_k, at z=0

intrinsic_alignment:
  Aia: 0.16 # Type: float.
  eIA: 1.66 # Type: float. \eta_{IA}
  bIA: 0.0 # Type: float. \beta_{IA}
  CIA: 0.0134 # Type: float.
  z_pivot_IA: 0.0 # Type: float.
  lumin_ratio_filename: null # Type: str | None. null if not used, otherwise path to the file (e.g. ./input/scaledmeanlum-E2Sa.dat)

# extra parameters to be passed to CCL cosmo object, eg CAMB extra parameters
# (see https://ccl.readthedocs.io/en/latest/api/pyccl.cosmology.html#pyccl.cosmology.Cosmology
# for the different options)
extra_parameters:
  camb:
    halofit_version: mead2020_feedback # Type: str
    kmax: 100 # Type: float | int
    HMCode_logT_AGN: 7.75 # Type: float
    num_massive_neutrinos: 1 # Type: int
    dark_energy_model: ppf # Type: str

# Halo model configuration using CCL classes (https://ccl.readthedocs.io/en/latest/api/pyccl.halos.html)
# Each parameter maps directly to a CCL class, and has exactly its name
halo_model:
  mass_def: MassDef200m # Type: str
  concentration: ConcentrationDuffy08 # Type: str
  mass_function: MassFuncTinker10 # Type: str
  halo_bias: HaloBiasTinker10 # Type: str
  halo_profile_dm: HaloProfileNFW # Type: str. 'dm' = 'dark matter'
  halo_profile_hod: HaloProfileHOD # Type: str.


OneCovariance:
    path_to_oc_executable: '../OneCovariance/covariance.py'
    consistency_checks: False
    oc_output_filename: 'cov_rcf_mergetest'



probe_selection:
  # Whether to compute the covariance matrix in real or harmonic space.
  # Options: ['harmonic', 'real'].
  space: harmonic # Type: str. 

  LL: True # Type: bool. Whether to compute the weak lensing ('LL') covariance
  GL: True # Type: bool. Whether to compute the galaxy-galaxy lensing ('GL') covariance
  GG: True # Type: bool. Whether to compute the photometric clustering ('GG') covariance
  
  xip: True # Type: bool. Whether to compute \xi_+
  xim: True # Type: bool. Whether to compute \xi_-
  gt: True # Type: bool. Whether to compute \gamma_t
  w: True # Type: bool. Whether to compute w
  
  cross_cov: True # Type: bool. Whether to compute the cross-terms between the selected probes

nz:
  # Paths to source (for WL) and lens (for GCph) redshift distributions.
  # These must have shape (z_points, zbins + 1) where z_points is the number of
  # redshift values over which the n(z) is measured, and format .txt or .dat
  # OR
  # as .fits files, following the LE3/Heracles/euclidlib format
  nz_sources_filename:  ../common_data/Spaceborne_jobs/develop/input/nzTab-EP03-zedMin02-zedMax25-mag245.dat # Type: str
  nz_lenses_filename:  ../common_data/Spaceborne_jobs/develop/input/nzTab-EP03-zedMin02-zedMax25-mag245.dat # Type: str

  # Number of galaxies per arcmin**2 for each redshift bin.
  # Should be of length 'zbins'
  # TODO get actual values
  ngal_sources: [8.09216, 8.09215, 8.09215] # Type: list[float]
  ngal_lenses: [8.09216, 8.09215, 8.09215] # Type: list[float]

  # [NOTE] while it can convenient to manipulate the n(z) at runtime, to guarantee consistent results, it is
  #        generally better to perform all of these steps outside of Spaceborne and to avoid any
  #        modification to the n(z) by setting shift_nz and smooth_nz to False.
  # [NOTE] The cuts defined by clip_zmin/zmax are only applied if shift_nz is True
  shift_nz: True # Type: bool. Whether to shift the redshift distributions as n_i(z) -> n_i(z - dz_i)
  dzWL: [-0.008848, 0.051368, 0.059484] # Type: list[float]. Per-bin shifts for WL (sources). Should be of length 'zbins'
  dzGC: [-0.008848, 0.051368, 0.059484] # Type: list[float]. Per-bin shifts for GCph (lenses). Should be of length 'zbins'
  normalize_shifted_nz: True # Type: bool. Whether to normalize the shifted n(z) distributions
  clip_zmin: 0. # Type: float. Minimum redshift to clip (cut) the shifted n_i(z) distributions
  clip_zmax: 3. # Type: float. Maximum redshift to clip (cut) the shifted n_i(z) distributions

  smooth_nz: False # Type: bool. Whether to smooth the input redshift distributions with a Gaussian kernel
  sigma_smoothing: 10 # Type: int | float. Standard deviation of the Gaussian kernel.


binning:
  binning_type: 'log' # Type: str. Options: ['log', 'lin', 'unbinned', 'ref_cut']

  ell_min_WL: 10 # Type: int. Minimum ell for WL
  ell_max_WL: 1500 # Type: int. Maximum ell for WL
  ell_bins_WL: 32 # Type: int. Number of bins for WL. Not used in the 'unbinned' and 'ref_cut' cases

  ell_min_GC: 10 # Type: int. Minimum ell for GC
  ell_max_GC: 1500 # Type: int. Maximum ell for GC
  ell_bins_GC: 32 # Type: int. Number of bins for GC. Not used in the 'unbinned' and 'ref_cut' cases

  # ell binning for the reference case; only a subset of these bins, depending on the
  # desired ell range of WL and GC, will be used in the 'ref_cut' case.
  ell_min_ref: 10 # Type: int. Minimum ell for reference case
  ell_max_ref: 1500 # Type: int. Maximum ell for reference case
  ell_bins_ref: 32 # Type: int. Number of bins for reference case

  WL_bins_filename: '../Spaceborne/output/ell_values_3x2pt.txt'
  GC_bins_filename: '../Spaceborne/output/ell_values_3x2pt.txt'

  # theta binning for the real-space covariance matrix
  theta_min_arcmin: 50  # Type: float | int
  theta_max_arcmin: 300  # Type: float | int
  theta_bins: 10  # Type: int


C_ell:
  # Whether or not to read user-provided Cls for the computation of the Gaussian covariance.
  # These should be the theoretical, decoupled Cls.
  # Note: the multiplicative shear bias specified below will NOT be applied to the input Cls.
  # Note: if the non-Gaussian covariance is requested, the code will compute intermediate quantities
  # such as the radial kernels for lensing and clustering. The user should make sure that the cosmology
  # and n(z) used to generate the input Cls and the ones specified in this cfg file are compatible.
  # The Cls should be passed in a .txt, .dat or .ascii file with columns corresponding to
  # ell, zi, zj, Cl[ell, zi, zj]
  # with `ell` the ell value, zi the i-th tomographic bin index, and zj the j-th tomographic bin index.
  # OR
  # as .fits files, following the LE3/Heracles/euclidlib format
  # The Cls are then splined along the \ell axis and interpolated over the \ell values specified in the `binning`
  # section of this cfg file.
  use_input_cls: False # Type: bool

  cl_LL_path:  ../common_data/Spaceborne_jobs/RR2_cov/input/cl_ll.txt # Type: str. Path to the shear-shear angular PS.
  cl_GL_path:  ../common_data/Spaceborne_jobs/RR2_cov/input/cl_gl.txt # Type: str. Path to the galaxy-shear angular PS.
  cl_GG_path:  ../common_data/Spaceborne_jobs/RR2_cov/input/cl_gg.txt # Type: str. Path to the galaxy-galaxy angular PS.

  # Which galaxy and magnification bias to use. Options:
  # - 'from_input': read the bias from the files specified in 'gal_bias_table_filename' and 'mag_bias_table_filename'.
  # - 'FS2_polynomial_fit': use the third-order polynomial fits to the galaxy and magnification bias from Flagship 2.
  #                         The actual values of these coefficients can be changed by modifying the values of
  #                         'galaxy_bias_fit_coeff' and 'magnification_bias_fit_coeff'.
  which_gal_bias: "FS2_polynomial_fit" # Type: str.
  which_mag_bias: "FS2_polynomial_fit" # Type: str.

  # Coefficients of the third-order polynomial galaxy and magnification bias.
  # The order is [z^0, z^1, z^2, z^3]
  galaxy_bias_fit_coeff: [1.33291, -0.72414, 1.0183, -0.14913] # Type: list[float]
  magnification_bias_fit_coeff: [-1.50685, 1.35034, 0.08321, 0.04279] # Type: list[float]

  # Input files for the galaxy and magnification bias. Should have shape (nz_points, zbins + 1), and sufficient
  # redshift support. These files are only used if `which_gal_bias` or `which_mag_bias` are set to 'from_input'.
  gal_bias_table_filename: ../common_data/Spaceborne_jobs/RR2_cov/input/gal_bias.txt # Type: str
  mag_bias_table_filename: ../common_data/Spaceborne_jobs/RR2_cov/input/mag_bias.txt # Type: str

  # Multiplicative shear bias per redshift bin.
  # This is NOT applied to the input Cls, in case they are provided.
  mult_shear_bias: [0.0, 0.0, 0.0] # Type: list[float]

  # Boolean flags for redshift-space distortions, intrinsic alignment and magnification bias
  has_rsd: False # Type: bool. Enable/disable redshift-space distortions.
  has_IA: True # Type: bool. Enable/disable intrinsic alignment.
  has_magnification_bias: True # Type: bool. Enable/disable magnification bias.

  # Keyword arguments for CCL Cl calculation (excluding `p_of_k_a`), described in
  # https://ccl.readthedocs.io/en/latest/api/pyccl.cosmology.html#pyccl.cosmology.Cosmology.angular_cl
  cl_CCL_kwargs:
    l_limber: -1 # Type: int
    limber_integration_method: spline # Type: str
    non_limber_integration_method: FKEM # Type: str

mask:
  load_mask: False # Type: bool. Whether to load the mask from a fits or npy file
  mask_path: ../input/mask.fits # Type: str. Path to the mask file (.FITS or .npy)
  generate_polar_cap: True # Type: bool. Whether to generate a polar cap mask on the fly.

  # Desired nside of the polar cap, or nside to which up/downgrade the reslution of the input mask.
  # If null (None), the nside of the input mask will be used, without up/downgrading.
  nside: 1024 # Type: int | None.

  survey_area_deg2: 13245 # Type: int
  apodize: False # Type: bool
  aposize: 0.1 # Type: float. Apodization scale in deg


BNT:
  cl_BNT_transform: False # Type: bool. Whether to BNT-transform the Cls
  cov_BNT_transform: False # Type: bool. Whether to BNT-transform the covariance

covariance:
  G: True # Type: bool. Enable/disable the Gaussian covariance term.
  SSC: True # Type: bool. Enable/disable the super-sample covariance (SSC) term
  cNG: False # Type: bool. Enable/disable the connected non-Gaussian (cNG) covariance term

  coupled_cov: False # Type: bool. Whether to compute the covariance of the coupled or decoupled Cls

  # Choose whether to use the upper ('triu') or lower ('tril') triangle
  # of the auto-spectra (LL, GG) zbins (C_{ij}(\ell)^AA = C_{ji}(\ell)^AA).
  triu_tril: triu # Type: str. Options: ['triu', 'tril']

  # Within the upper or lower triangle, count indices in
  # a row-major or column-major order.
  row_col_major: row-major # Type: str. Options: ['row-major', 'column-major']
  
  # Determines the ordering of the covariance matrix in 2D, with the outermost
  # loop corresponding to the leftmost index. 
  # `scale` = ell or theta, depending on the 'space' requested.
  # Options: [scale_probe_zpair, probe_scale_zpair, probe_zpair_scale, zpair_probe_scale]
  # Examples:
  # - scale_probe_zpair: Ordered by scale index (ell or theta), then probe type, then redshift pair.
  # - probe_scale_zpair: Ordered by probe type, then multipole (ell), then redshift pair. This is the ordering used by CLOE
  covariance_ordering_2D: probe_zpair_scale # Type: str.

  # Whether to save the full 6D covariance matrix, without to any index compression or reshaping.
  # The output will be a npz file for each term, containing arrays of shape
  # ({ell, theta}_bins, {ell, theta}_bins, zbins, zbins, zbins, zbins).
  # for each (unique) probe combination.
  save_full_cov: True # Type: bool

  # Whether to split the Gaussian covariance term into the
  # sample variance (SVA), sampling noise (SN) and mixed (MIX) terms
  split_gaussian_cov: False # Type: bool

  # Ellipticity dispersion *per component* = sigma_eps_i.
  # total ellipticity dispersion = sigma_eps
  # sigma_eps = (sigma_eps_i * np.sqrt(2))
  # Should be of length 'zbins'
  sigma_eps_i: [0.26, 0.26, 0.26] # Type: list[float]

  # Whether to include the noise power spectra in the computation of the
  # Gaussian covariance matrix.
  no_sampling_noise: False # Type: bool

  which_pk_responses: halo_model # Type: str. Options: ['halo_model', 'separate_universe']

  # Which first-order galaxy bias to use in the computation of the counterterms for the GL and GG responses.
  # Options:
  # - 'from_HOD' (from the Halo Occupation Distribution previously initialized)
  # - 'from_input' (from the input tabulated galaxy bias values)/FS2 fit computed in SB
  which_b1g_in_resp: from_input # Type: str. Options: ['from_HOD', 'from_input']

  # Whether or not to include the second-order galaxy bias in the GCph SU responses
  include_b2g: True # Type: bool

  # Whether or not to include the additional terms of Terasawa et al [arXiv:2310.13330] in the halo model responses
  include_terasawa_terms: False # Type: bool

  # k grid used for power spectrum and trispectrum computation
  log10_k_min: -5.0 # Type: float. Units: 1/Mpc
  log10_k_max: 2.0 # Type: float. Units: 1/Mpc
  k_steps: 20 # Type: int. Around 100 should be enough

  z_min: 0.02 # Type: float
  z_max: 3.0 # Type: float
  z_steps: 10000 # Type: int. Number of z steps used for the NG covariance projection. Should be quite high, e.g. 10000
  z_steps_trisp: 10 # Type: int. Number of z steps used to compute the trispectrum - around 50 should be enough

  use_KE_approximation: False # Type: bool. Whether or not to use the single-redshift integral approximation for the SSC

  # Name of the output covariance file. The extension can be `npz`, `npy`, `txt` or `dat`
  cov_filename: cov_{which_ng_cov:s}_{probe:s}_{ndim}.npz # Type: str.


PyCCL:
  # (from CCL docs): integration method to be used for the Limber integrals.
  # Options:
  # - 'qag_quad' (GSL's qag method backed up by quad when it fails)
  # - 'spline' (the integrand is splined and then integrated analytically).
  # DSnote: note that the former could give errors.
  cov_integration_method: spline # Type: str

  # Whether or not to load the previously computed trispectrum.
  load_cached_tkka: False # Type: bool.

  # Whether or not to use the default k and a grids used in CCL.
  # Setting this to True will make the computation of the cNG trispectrum slower
  # with respect to the default values.
  use_default_k_a_grids: False # Type: bool.

  # (from CCL docs): number of points over which to compute the radial kernels (weight functions).
  # See e.g. documentation of https://ccl.readthedocs.io/en/latest/api/pyccl.tracers.html#pyccl.tracers.NumberCountsTracer
  n_samples_wf: 1000 # Type: int  # TODO move to precision settings!

  # precision parameters for splines and numerical integration, described in
  # https://ccl.readthedocs.io/en/latest/source/notation_and_other_cosmological_conventions.html#controlling-splines-and-numerical-accuracy.
  spline_params: # Type: dict | None
    A_SPLINE_NA_PK: 240 # Type: int
    K_MAX_SPLINE: 300 # Type: int
  gsl_params: null # Type: dict | None


namaster:
  use_namaster: False # Type: bool. Whether to use Namaster to compute the partial-sky Gaussian covariance
  spin0: False # Type: bool. Whether to approximate the shear field as a spin-0 field (faster but less accurate)
  use_INKA: True # Type: bool. Whether to use the improved Narrow Kernel Approximation
  workspace_path: ... # Type: str. Path to the workspace, if already computed


sample_covariance:
  # Whether to compute the sample covariance from a set of Gaussian realizations
  compute_sample_cov: False  # Type: bool. 
  
  # Which code to use to compute the coupled Cls on the masked maps. The results are 
  # essentially equivalent, but 'namaster' is a bit faster.
  # In case the decoupled (sample) covariance is requested, in both cases the 
  # workspace.decouple_cell() function will be used. 
  # Documentation: 
  # https://namaster.readthedocs.io/en/latest/api/pymaster.workspaces.html#pymaster.workspaces.NmtWorkspaceFlat.decouple_cell
  # Options: ['namaster', 'healpy']. 
  which_cls: namaster  # Type: str. 
  nreal: 5000 # Type: int. Number of realizations for the sample covariance matrix
  fix_seed: True # Type: bool. Whether to fix the random seed for reproducible results


precision:
  # ==================================== NaMaster ====================================
  # Number of iterations when computing the alms of the input map. See 
  # see https://namaster.readthedocs.io/en/latest/api/pymaster.field.html#pymaster.field.NmtField
  n_iter_nmt: null # Type: None | int. 

  # ===================================== pylevin ====================================
  # Precision settings for pylevin. See the official documentation for more details:
  # https://levin-bessel.readthedocs.io/en/latest/index.html
  # https://github.com/rreischke/levin_bessel/blob/main/tutorial/levin_tutorial.ipynb
  n_sub: 20  # number of collocation points in each bisection  # default: 8
  n_bisec_max: 500  # maximum number of bisections used  # default: 32
  rel_acc: 1.e-7  # relative accuracy target  # default: 1.e-4
  boost_bessel: True  # Type: bool. Compute bessel functions with boost instead of GSL (higher accuracy at high Bessel orders)
  verbose: True  # Type: bool. Whether to display warnings

  # ================================= real space cov =================================
  # ell binning used for the projection of the covariance from harmonic space to real space.
  # the grid used is np.geomspace(ell_min, ell_max, ell_bins)
  ell_min_rs: 2  # Type: int
  ell_max_rs: 100000  # Type: int
  ell_bins_rs: 500  # Type: int. Should be high to get accurate results with Simpson integration
  ell_bins_rs_nongauss: 100  # Type: int. Should be high to get accurate results with Simpson integration
  

misc:
  # note if you work from an interactive environment (e.g. jupyter notebook), you might 
  # have to restart the kernel after changing the num_threads, and jax_platform
  num_threads: 40 # Type: int. How many threads to use for the parallel computations
  
  # jax-specific settings
  jax_platform: 'auto' # Type: str. 'auto', 'cpu' or 'gpu'
  jax_enable_x64: true # Type: str. Whether to enable 64-bit precision for computations run on the GPU

  # some sanity checks on the covariance matrix. These could take a while to run.
  test_numpy_inversion: True # Type: bool. Test for errors in np.linalg.inv
  test_condition_number: True # Type: bool. Check if condition number is above 1e10
  test_cholesky_decomposition: True # Type: bool. Test if cholesky decomposition fails
  test_symmetry: True # Type: bool. Test if covariance matrix is symmetric (cov = cov.T)

  # Whether to produce a triangle plot of the Cls, especially useful when using input
  # Cls for a quick visual comparison. Can be slow, set to False for a faster runtime.
  cl_triangle_plot: False # Type: bool.
  
  # If the covariance_ordering_2D starts with "probe", setting this to True 
  # automatically displays the labels and limits for the different probe blocks.
  # set this to False to display the number of elements in the covariance instead
  plot_probe_names: True # Type: bool

  output_path: ../common_data/Spaceborne_jobs/develop # Type: str. Path to the output directory
  save_figs: True  # Type: bool. Whether to save the figs in the folder f'{output_path}/figs'
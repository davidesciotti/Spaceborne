sys:1: UserWarning: the number of steps in the redshift grid is small, you may want to consider increasing it
   _____                       __                        
  / ___/____  ____ _________  / /_  ____  _________  ___ 
  \__ \/ __ \/ __ `/ ___/ _ \/ __ \/ __ \/ ___/ __ \/ _ \
 ___/ / /_/ / /_/ / /__/  __/ /_/ / /_/ / /  / / / /  __/
/____/ .___/\__,_/\___/\___/_.___/\____/_/  /_/ /_/\___/ 
    /_/                                                  

Generating a polar cap mask with area 13245 deg^2 and nside 1024
Angular radius of the cap: 69.0309 deg
fsky = 0.3211
Shifting n(z), clipping between redshifts 0 and 3
Shifting n(z), clipping between redshifts 0 and 3
Computing Cls...
done in 3.08 s
Gauss. cov. matrices computed in 0.03 s
Computing halo model probe responses...
0it [00:00, ?it/s]9it [00:00, 88.93it/s]10it [00:00, 89.78it/s]
Package 'NPZ' is loaded.
Package 'LoopVectorization' is loaded.
Package 'YAML' is loaded.

*** Computing SSC ****
specs:
nbl: 20
zbins: 3
z_steps: 20
probe_combinations: ["LLLL", "LLGL", "LLGG", "GLGL", "GLGG", "GGGG"]
integration_type: simps_KE_approximation
*****************

Computing SSC covariance block LL_LL
  4.047250 seconds (5.83 M allocations: 287.286 MiB, 1.12% gc time, 101.41% compilation time)
Computing SSC covariance block LL_GL
  0.001449 seconds (12 allocations: 338.172 KiB)
Computing SSC covariance block LL_GG
  0.000079 seconds (12 allocations: 225.672 KiB)
Computing SSC covariance block GL_GL
  0.000133 seconds (12 allocations: 506.953 KiB)
Computing SSC covariance block GL_GG
  0.000111 seconds (12 allocations: 338.172 KiB)
Computing SSC covariance block GG_GG
  0.000067 seconds (12 allocations: 225.672 KiB)
/u/dsciotti/code/Spaceborne/main.py:1484: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
  fig, ax = plt.subplots(1, 2, figsize=(10, 6))
SSC computed in 0.15 m
Including SSC in total covariance
cNG term not requested, setting it to zero
Covariance matrices computed
Covariance matrices saved in /u/dsciotti/code/Spaceborne_bench/tmp

Finished in 0.28 minutes
sys:1: UserWarning: the number of steps in the redshift grid is small, you may want to consider increasing it
/u/dsciotti/code/Spaceborne/main.py:1484: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
  fig, ax = plt.subplots(1, 2, figsize=(10, 6))
   _____                       __                        
  / ___/____  ____ _________  / /_  ____  _________  ___ 
  \__ \/ __ \/ __ `/ ___/ _ \/ __ \/ __ \/ ___/ __ \/ _ \
 ___/ / /_/ / /_/ / /__/  __/ /_/ / /_/ / /  / / / /  __/
/____/ .___/\__,_/\___/\___/_.___/\____/_/  /_/ /_/\___/ 
    /_/                                                  

Generating a polar cap mask with area 13245 deg^2 and nside 1024
Angular radius of the cap: 69.0309 deg
fsky = 0.3211
Shifting n(z), clipping between redshifts 0 and 3
Shifting n(z), clipping between redshifts 0 and 3
Computing Cls...
done in 2.76 s
Gauss. cov. matrices computed in 0.03 s
SSC not requested, setting it to zero
cNG term not requested, setting it to zero
Covariance matrices computed
Covariance matrices saved in /u/dsciotti/code/Spaceborne_bench/tmp

Finished in 0.12 minutes


🧪🧪🧪 Testing config_0000 🧪🧪🧪...

Keys not in common: {'wl_bins_filename', 'gc_bins_filename'}


Comparison failed for binning_type: The DType <class 'numpy._FloatAbstractDType'> could not be promoted by <class 'numpy.dtypes.StrDType'>. This means that no common DType exists for the given inputs. For example they cannot be stored in a single array unless the dtype is `object`. The full list of DTypes is: (<class 'numpy.dtypes.StrDType'>, <class 'numpy._FloatAbstractDType'>)
bnt_matrix matches the benchmark ✅
cl_3x2pt_5d matches the benchmark ✅
cl_gg_3d matches the benchmark ✅
cl_gl_3d matches the benchmark ✅
cl_ll_3d matches the benchmark ✅
cov_3x2pt_cng_2D matches the benchmark ✅
cov_3x2pt_g_2D matches the benchmark ✅
cov_3x2pt_ssc_2D matches the benchmark ✅
cov_3x2pt_tot_2D matches the benchmark ✅
cov_GC_cng_2D matches the benchmark ✅
cov_GC_g_2D matches the benchmark ✅
cov_GC_ssc_2D matches the benchmark ✅
cov_GC_tot_2D matches the benchmark ✅
cov_WL_cng_2D matches the benchmark ✅
cov_WL_g_2D matches the benchmark ✅
cov_WL_ssc_2D matches the benchmark ✅
cov_WL_tot_2D matches the benchmark ✅
cov_XC_cng_2D matches the benchmark ✅
cov_XC_g_2D matches the benchmark ✅
cov_XC_ssc_2D matches the benchmark ✅
cov_XC_tot_2D matches the benchmark ✅
d2CGG_dVddeltab matches the benchmark ✅
d2CGL_dVddeltab matches the benchmark ✅
d2CLL_dVddeltab matches the benchmark ✅
dPgg_ddeltab matches the benchmark ✅
dPgm_ddeltab matches the benchmark ✅
dPmm_ddeltab matches the benchmark ✅
delta_l_3x2pt matches the benchmark ✅
delta_l_GC matches the benchmark ✅
delta_l_WL matches the benchmark ✅
delta_l_XC matches the benchmark ✅
delta_l_ref matches the benchmark ✅
do_sample_cov matches the benchmark ✅
ell_edges_3x2pt matches the benchmark ✅
ell_edges_GC matches the benchmark ✅
ell_edges_WL matches the benchmark ✅
ell_edges_XC matches the benchmark ✅
ell_edges_ref matches the benchmark ✅
ell_max_3x2pt matches the benchmark ✅
ell_max_3x2pt_unb matches the benchmark ✅
ell_max_GC matches the benchmark ✅
ell_max_WL matches the benchmark ✅
ell_max_XC matches the benchmark ✅
ell_max_ref matches the benchmark ✅
ell_min_3x2pt matches the benchmark ✅
ell_min_GC matches the benchmark ✅
ell_min_WL matches the benchmark ✅
ell_min_XC matches the benchmark ✅
ell_min_ref matches the benchmark ✅
ells_3x2pt matches the benchmark ✅
ells_3x2pt_unb matches the benchmark ✅
ells_GC matches the benchmark ✅
ells_WL matches the benchmark ✅
ells_XC matches the benchmark ✅
ells_ref matches the benchmark ✅
gal_bias_2d matches the benchmark ✅
ind matches the benchmark ✅
k_grid matches the benchmark ✅
Comparison failed for k_grid_sigma2_b: 
Not equal to tolerance rtol=1e-05, atol=0
k_grid_sigma2_b doesn't match the benchmark ❌
(shapes (20000,), (0,) mismatch)
 x: array([1.000000e-05, 1.000806e-05, 1.001613e-05, ..., 9.983894e+01,
       9.991944e+01, 1.000000e+02])
 y: array([], dtype=float64)
mag_bias_2d matches the benchmark ✅
nbl_3x2pt matches the benchmark ✅
nbl_3x2pt_unb matches the benchmark ✅
nbl_GC matches the benchmark ✅
nbl_WL matches the benchmark ✅
nbl_XC matches the benchmark ✅
nbl_ref matches the benchmark ✅
Comparison failed for nz_lns: 
Not equal to tolerance rtol=1e-05, atol=0
nz_lns doesn't match the benchmark ❌
Mismatched elements: 2473 / 3000 (82.4%)
Max absolute difference: 5.05007653e-05
Max relative difference: 1.67780656e-05
 x: array([[0.000000e+00, 0.000000e+00, 0.000000e+00],
       [0.000000e+00, 0.000000e+00, 0.000000e+00],
       [0.000000e+00, 0.000000e+00, 0.000000e+00],...
 y: array([[0.000000e+00, 0.000000e+00, 0.000000e+00],
       [0.000000e+00, 0.000000e+00, 0.000000e+00],
       [0.000000e+00, 0.000000e+00, 0.000000e+00],...
nz_src matches the benchmark ✅
sigma2_b matches the benchmark ✅
use_namaster matches the benchmark ✅
wf_delta matches the benchmark ✅
wf_gamma matches the benchmark ✅
wf_ia matches the benchmark ✅
wf_lensing_arr matches the benchmark ✅
wf_mu matches the benchmark ✅
z_grid matches the benchmark ✅
z_grid_trisp matches the benchmark ✅
cov WL tot = G + SSC + cNG ✅
cov WL tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅


🧪🧪🧪 Testing config_0001 🧪🧪🧪...

Keys not in common: {'wl_bins_filename', 'gc_bins_filename'}


Comparison failed for binning_type: The DType <class 'numpy._FloatAbstractDType'> could not be promoted by <class 'numpy.dtypes.StrDType'>. This means that no common DType exists for the given inputs. For example they cannot be stored in a single array unless the dtype is `object`. The full list of DTypes is: (<class 'numpy.dtypes.StrDType'>, <class 'numpy._FloatAbstractDType'>)
bnt_matrix matches the benchmark ✅
cl_3x2pt_5d matches the benchmark ✅
cl_gg_3d matches the benchmark ✅
cl_gl_3d matches the benchmark ✅
cl_ll_3d matches the benchmark ✅
cov_3x2pt_cng_2D matches the benchmark ✅
cov_3x2pt_g_2D matches the benchmark ✅
cov_3x2pt_ssc_2D matches the benchmark ✅
cov_3x2pt_tot_2D matches the benchmark ✅
cov_GC_cng_2D matches the benchmark ✅
cov_GC_g_2D matches the benchmark ✅
cov_GC_ssc_2D matches the benchmark ✅
cov_GC_tot_2D matches the benchmark ✅
cov_WL_cng_2D matches the benchmark ✅
cov_WL_g_2D matches the benchmark ✅
cov_WL_ssc_2D matches the benchmark ✅
cov_WL_tot_2D matches the benchmark ✅
cov_XC_cng_2D matches the benchmark ✅
cov_XC_g_2D matches the benchmark ✅
cov_XC_ssc_2D matches the benchmark ✅
cov_XC_tot_2D matches the benchmark ✅
d2CGG_dVddeltab matches the benchmark ✅
d2CGL_dVddeltab matches the benchmark ✅
d2CLL_dVddeltab matches the benchmark ✅
dPgg_ddeltab matches the benchmark ✅
dPgm_ddeltab matches the benchmark ✅
dPmm_ddeltab matches the benchmark ✅
delta_l_3x2pt matches the benchmark ✅
delta_l_GC matches the benchmark ✅
delta_l_WL matches the benchmark ✅
delta_l_XC matches the benchmark ✅
delta_l_ref matches the benchmark ✅
do_sample_cov matches the benchmark ✅
ell_edges_3x2pt matches the benchmark ✅
ell_edges_GC matches the benchmark ✅
ell_edges_WL matches the benchmark ✅
ell_edges_XC matches the benchmark ✅
ell_edges_ref matches the benchmark ✅
ell_max_3x2pt matches the benchmark ✅
ell_max_3x2pt_unb matches the benchmark ✅
ell_max_GC matches the benchmark ✅
ell_max_WL matches the benchmark ✅
ell_max_XC matches the benchmark ✅
ell_max_ref matches the benchmark ✅
ell_min_3x2pt matches the benchmark ✅
ell_min_GC matches the benchmark ✅
ell_min_WL matches the benchmark ✅
ell_min_XC matches the benchmark ✅
ell_min_ref matches the benchmark ✅
ells_3x2pt matches the benchmark ✅
ells_3x2pt_unb matches the benchmark ✅
ells_GC matches the benchmark ✅
ells_WL matches the benchmark ✅
ells_XC matches the benchmark ✅
ells_ref matches the benchmark ✅
gal_bias_2d matches the benchmark ✅
ind matches the benchmark ✅
k_grid matches the benchmark ✅
Comparison failed for k_grid_sigma2_b: 
Not equal to tolerance rtol=1e-05, atol=0
k_grid_sigma2_b doesn't match the benchmark ❌
(shapes (20000,), (0,) mismatch)
 x: array([1.000000e-05, 1.000806e-05, 1.001613e-05, ..., 9.983894e+01,
       9.991944e+01, 1.000000e+02])
 y: array([], dtype=float64)
mag_bias_2d matches the benchmark ✅
nbl_3x2pt matches the benchmark ✅
nbl_3x2pt_unb matches the benchmark ✅
nbl_GC matches the benchmark ✅
nbl_WL matches the benchmark ✅
nbl_XC matches the benchmark ✅
nbl_ref matches the benchmark ✅
Comparison failed for nz_lns: 
Not equal to tolerance rtol=1e-05, atol=0
nz_lns doesn't match the benchmark ❌
Mismatched elements: 2473 / 3000 (82.4%)
Max absolute difference: 5.05007653e-05
Max relative difference: 1.67780656e-05
 x: array([[0.000000e+00, 0.000000e+00, 0.000000e+00],
       [0.000000e+00, 0.000000e+00, 0.000000e+00],
       [0.000000e+00, 0.000000e+00, 0.000000e+00],...
 y: array([[0.000000e+00, 0.000000e+00, 0.000000e+00],
       [0.000000e+00, 0.000000e+00, 0.000000e+00],
       [0.000000e+00, 0.000000e+00, 0.000000e+00],...sys:1: UserWarning: the number of steps in the redshift grid is small, you may want to consider increasing it
/u/dsciotti/code/Spaceborne/main.py:1484: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
  fig, ax = plt.subplots(1, 2, figsize=(10, 6))
   _____                       __                        
  / ___/____  ____ _________  / /_  ____  _________  ___ 
  \__ \/ __ \/ __ `/ ___/ _ \/ __ \/ __ \/ ___/ __ \/ _ \
 ___/ / /_/ / /_/ / /__/  __/ /_/ / /_/ / /  / / / /  __/
/____/ .___/\__,_/\___/\___/_.___/\____/_/  /_/ /_/\___/ 
    /_/                                                  

Generating a polar cap mask with area 13245 deg^2 and nside 1024
Angular radius of the cap: 69.0309 deg
fsky = 0.3211
Computing Cls...
done in 3.01 s
Gauss. cov. matrices computed in 0.03 s
SSC not requested, setting it to zero
cNG term not requested, setting it to zero
Covariance matrices computed
Covariance matrices saved in /u/dsciotti/code/Spaceborne_bench/tmp

Finished in 0.12 minutes
sys:1: UserWarning: the number of steps in the redshift grid is small, you may want to consider increasing it
   _____                       __                        
  / ___/____  ____ _________  / /_  ____  _________  ___ 
  \__ \/ __ \/ __ `/ ___/ _ \/ __ \/ __ \/ ___/ __ \/ _ \
 ___/ / /_/ / /_/ / /__/  __/ /_/ / /_/ / /  / / / /  __/
/____/ .___/\__,_/\___/\___/_.___/\____/_/  /_/ /_/\___/ 
    /_/                                                  

Generating a polar cap mask with area 13245 deg^2 and nside 1024
Angular radius of the cap: 69.0309 deg
fsky = 0.3211
Computing Cls...
done in 2.76 s
Computing cov workspace coupling coefficients...
...done in 15.75 s
Computing decoupled spin0 partial-sky Gaussian covariance with NaMaster...
  0%|          | 0/81 [00:00<?, ?it/s]  1%|          | 1/81 [00:00<00:13,  5.84it/s]  2%|▏         | 2/81 [00:00<00:11,  7.00it/s]  4%|▎         | 3/81 [00:00<00:10,  7.22it/s]  5%|▍         | 4/81 [00:00<00:10,  7.47it/s]  6%|▌         | 5/81 [00:00<00:10,  7.50it/s]  7%|▋         | 6/81 [00:00<00:09,  7.54it/s]  9%|▊         | 7/81 [00:00<00:09,  7.64it/s] 10%|▉         | 8/81 [00:01<00:09,  7.69it/s] 11%|█         | 9/81 [00:01<00:09,  7.72it/s] 12%|█▏        | 10/81 [00:01<00:09,  7.74it/s] 14%|█▎        | 11/81 [00:01<00:09,  7.71it/s] 15%|█▍        | 12/81 [00:01<00:08,  7.72it/s] 16%|█▌        | 13/81 [00:01<00:08,  7.72it/s] 17%|█▋        | 14/81 [00:01<00:08,  7.78it/s] 19%|█▊        | 15/81 [00:01<00:08,  7.76it/s] 20%|█▉        | 16/81 [00:02<00:08,  7.75it/s] 21%|██        | 17/81 [00:02<00:08,  7.71it/s] 22%|██▏       | 18/81 [00:02<00:08,  7.80it/s] 23%|██▎       | 19/81 [00:02<00:07,  7.84it/s] 25%|██▍       | 20/81 [00:02<00:07,  7.89it/s] 26%|██▌       | 21/81 [00:02<00:07,  7.94it/s] 27%|██▋       | 22/81 [00:02<00:07,  8.00it/s] 28%|██▊       | 23/81 [00:02<00:07,  7.95it/s] 30%|██▉       | 24/81 [00:03<00:07,  7.94it/s] 31%|███       | 25/81 [00:03<00:07,  7.99it/s] 32%|███▏      | 26/81 [00:03<00:06,  7.97it/s] 33%|███▎      | 27/81 [00:03<00:06,  7.94it/s] 35%|███▍      | 28/81 [00:03<00:06,  7.90it/s] 36%|███▌      | 29/81 [00:03<00:06,  7.85it/s] 37%|███▋      | 30/81 [00:03<00:06,  7.96it/s] 38%|███▊      | 31/81 [00:03<00:06,  7.86it/s] 40%|███▉      | 32/81 [00:04<00:06,  7.78it/s] 41%|████      | 33/81 [00:04<00:06,  7.74it/s] 42%|████▏     | 34/81 [00:04<00:06,  7.76it/s] 43%|████▎     | 35/81 [00:04<00:05,  7.89it/s] 44%|████▍     | 36/81 [00:04<00:05,  7.90it/s] 46%|████▌     | 37/81 [00:04<00:05,  7.88it/s] 47%|████▋     | 38/81 [00:04<00:05,  7.95it/s] 48%|████▊     | 39/81 [00:05<00:05,  7.77it/s] 49%|████▉     | 40/81 [00:05<00:05,  7.75it/s] 51%|█████     | 41/81 [00:05<00:05,  7.73it/s] 52%|█████▏    | 42/81 [00:05<00:05,  7.71it/s] 53%|█████▎    | 43/81 [00:05<00:04,  7.86it/s] 54%|█████▍    | 44/81 [00:05<00:04,  7.99it/s] 56%|█████▌    | 45/81 [00:05<00:04,  7.96it/s] 57%|█████▋    | 46/81 [00:05<00:04,  8.00it/s] 58%|█████▊    | 47/81 [00:06<00:04,  8.08it/s] 59%|█████▉    | 48/81 [00:06<00:04,  8.10it/s] 60%|██████    | 49/81 [00:06<00:03,  8.12it/s] 62%|██████▏   | 50/81 [00:06<00:03,  8.08it/s] 63%|██████▎   | 51/81 [00:06<00:03,  7.93it/s] 64%|██████▍   | 52/81 [00:06<00:03,  7.90it/s] 65%|██████▌   | 53/81 [00:06<00:03,  7.83it/s] 67%|██████▋   | 54/81 [00:06<00:03,  7.77it/s] 68%|██████▊   | 55/81 [00:07<00:03,  7.77it/s] 69%|██████▉   | 56/81 [00:07<00:03,  7.65it/s] 70%|███████   | 57/81 [00:07<00:03,  7.60it/s] 72%|███████▏  | 58/81 [00:07<00:03,  7.55it/s] 73%|███████▎  | 59/81 [00:07<00:02,  7.54it/s] 74%|███████▍  | 60/81 [00:07<00:02,  7.64it/s] 75%|███████▌  | 61/81 [00:07<00:02,  7.73it/s] 77%|███████▋  | 62/81 [00:07<00:02,  7.74it/s] 78%|███████▊  | 63/81 [00:08<00:02,  7.81it/s] 79%|███████▉  | 64/81 [00:08<00:02,  7.80it/s] 80%|████████  | 65/81 [00:08<00:02,  7.80it/s] 81%|████████▏ | 66/81 [00:08<00:01,  7.94it/s] 83%|████████▎ | 67/81 [00:08<00:01,  8.08it/s] 84%|████████▍ | 68/81 [00:08<00:01,  8.06it/s] 85%|████████▌ | 69/81 [00:08<00:01,  8.07it/s] 86%|████████▋ | 70/81 [00:08<00:01,  8.00it/s] 88%|████████▊ | 71/81 [00:09<00:01,  8.00it/s] 89%|████████▉ | 72/81 [00:09<00:01,  7.87it/s] 90%|█████████ | 73/81 [00:09<00:01,  7.87it/s] 91%|█████████▏| 74/81 [00:09<00:00,  7.79it/s] 93%|█████████▎| 75/81 [00:09<00:00,  7.79it/s] 94%|█████████▍| 76/81 [00:09<00:00,  7.72it/s] 95%|█████████▌| 77/81 [00:09<00:00,  7.73it/s] 96%|█████████▋| 78/81 [00:09<00:00,  7.73it/s] 98%|█████████▊| 79/81 [00:10<00:00,  7.66it/s] 99%|█████████▉| 80/81 [00:10<00:00,  7.72it/s]100%|██████████| 81/81 [00:10<00:00,  7.85it/s]100%|██████████| 81/81 [00:10<00:00,  7.80it/s]
/u/dsciotti/code/Spaceborne/main.py:1484: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
  fig, ax = plt.subplots(1, 2, figsize=(10, 6))
...done in 0.17 m
Gauss. cov. matrices computed in 53.63 s
SSC not requested, setting it to zero
cNG term not requested, setting it to zero
Covariance matrices computed
Covariance matrices saved in /u/dsciotti/code/Spaceborne_bench/tmp

Testing cov_3x2pt_tot_2D...

Condition number = 2.5165e+10
Cholesky decomposition successful
Numpy inversion successful.
Inverse test successfully (M @ M^{-1} is identity). atol=1e-9, rtol=1e-7
Matrix is symmetric. atol=0, rtol=1e-7
Finished in 1.05 minutes
sys:1: UserWarning: the number of steps in the redshift grid is small, you may want to consider increasing it
   _____                       __                        
  / ___/____  ____ _________  / /_  ____  _________  ___ 
  \__ \/ __ \/ __ `/ ___/ _ \/ __ \/ __ \/ ___/ __ \/ _ \
 ___/ / /_/ / /_/ / /__/  __/ /_/ / /_/ / /  / / / /  __/
/____/ .___/\__,_/\___/\___/_.___/\____/_/  /_/ /_/\___/ 
    /_/                                                  

Generating a polar cap mask with area 13245 deg^2 and nside 1024
Angular radius of the cap: 69.0309 deg
fsky = 0.3211
Computing Cls...
done in 3.06 s
Computing cov workspace coupling coefficients...
...done in 15.62 s
Computing decoupled spin0 partial-sky Gaussian covariance with NaMaster...
  0%|          | 0/81 [00:00<?, ?it/s]  1%|          | 1/81 [00:00<00:39,  2.04it/s]  2%|▏         | 2/81 [00:00<00:38,  2.07it/s]  4%|▎         | 3/81 [00:01<00:37,  2.07it/s]  5%|▍         | 4/81 [00:02<00:41,  1.85it/s]  6%|▌         | 5/81 [00:02<00:38,  1.95it/s]  7%|▋         | 6/81 [00:02<00:36,  2.03it/s]  9%|▊         | 7/81 [00:03<00:35,  2.08it/s] 10%|▉         | 8/81 [00:03<00:34,  2.11it/s] 11%|█         | 9/81 [00:04<00:33,  2.14it/s] 12%|█▏        | 10/81 [00:04<00:32,  2.16it/s] 14%|█▎        | 11/81 [00:05<00:32,  2.17it/s] 15%|█▍        | 12/81 [00:05<00:31,  2.18it/s] 16%|█▌        | 13/81 [00:06<00:31,  2.16it/s] 17%|█▋        | 14/81 [00:06<00:30,  2.16it/s] 19%|█▊        | 15/81 [00:07<00:30,  2.15it/s] 20%|█▉        | 16/81 [00:07<00:30,  2.14it/s] 21%|██        | 17/81 [00:08<00:30,  2.13it/s] 22%|██▏       | 18/81 [00:08<00:29,  2.13it/s] 23%|██▎       | 19/81 [00:09<00:28,  2.15it/s] 25%|██▍       | 20/81 [00:09<00:28,  2.15it/s] 26%|██▌       | 21/81 [00:09<00:27,  2.16it/s] 27%|██▋       | 22/81 [00:10<00:27,  2.17it/s] 28%|██▊       | 23/81 [00:10<00:26,  2.17it/s] 30%|██▉       | 24/81 [00:11<00:26,  2.18it/s] 31%|███       | 25/81 [00:11<00:25,  2.18it/s] 32%|███▏      | 26/81 [00:12<00:25,  2.17it/s] 33%|███▎      | 27/81 [00:12<00:24,  2.16it/s] 35%|███▍      | 28/81 [00:13<00:24,  2.17it/s] 36%|███▌      | 29/81 [00:13<00:23,  2.18it/s] 37%|███▋      | 30/81 [00:14<00:23,  2.18it/s] 38%|███▊      | 31/81 [00:14<00:23,  2.16it/s] 40%|███▉      | 32/81 [00:15<00:22,  2.14it/s] 41%|████      | 33/81 [00:15<00:22,  2.15it/s] 42%|████▏     | 34/81 [00:15<00:21,  2.17it/s] 43%|████▎     | 35/81 [00:16<00:21,  2.17it/s] 44%|████▍     | 36/81 [00:16<00:20,  2.18it/s] 46%|████▌     | 37/81 [00:17<00:20,  2.18it/s] 47%|████▋     | 38/81 [00:17<00:19,  2.19it/s] 48%|████▊     | 39/81 [00:18<00:19,  2.19it/s] 49%|████▉     | 40/81 [00:18<00:18,  2.18it/s] 51%|█████     | 41/81 [00:19<00:18,  2.18it/s] 52%|█████▏    | 42/81 [00:19<00:17,  2.19it/s] 53%|█████▎    | 43/81 [00:20<00:17,  2.19it/s] 54%|█████▍    | 44/81 [00:20<00:16,  2.20it/s] 56%|█████▌    | 45/81 [00:20<00:16,  2.20it/s] 57%|█████▋    | 46/81 [00:21<00:16,  2.17it/s] 58%|█████▊    | 47/81 [00:21<00:15,  2.16it/s] 59%|█████▉    | 48/81 [00:22<00:15,  2.16it/s] 60%|██████    | 49/81 [00:22<00:14,  2.17it/s] 62%|██████▏   | 50/81 [00:23<00:14,  2.18it/s] 63%|██████▎   | 51/81 [00:23<00:13,  2.17it/s] 64%|██████▍   | 52/81 [00:24<00:13,  2.17it/s] 65%|██████▌   | 53/81 [00:24<00:12,  2.17it/s] 67%|██████▋   | 54/81 [00:25<00:12,  2.18it/s] 68%|██████▊   | 55/81 [00:25<00:11,  2.19it/s] 69%|██████▉   | 56/81 [00:26<00:11,  2.18it/s] 70%|███████   | 57/81 [00:26<00:11,  2.17it/s] 72%|███████▏  | 58/81 [00:26<00:10,  2.18it/s] 73%|███████▎  | 59/81 [00:27<00:10,  2.17it/s] 74%|███████▍  | 60/81 [00:27<00:09,  2.18it/s] 75%|███████▌  | 61/81 [00:28<00:09,  2.17it/s] 77%|███████▋  | 62/81 [00:28<00:08,  2.18it/s] 78%|███████▊  | 63/81 [00:29<00:08,  2.19it/s] 79%|███████▉  | 64/81 [00:29<00:07,  2.20it/s] 80%|████████  | 65/81 [00:30<00:07,  2.20it/s] 81%|████████▏ | 66/81 [00:30<00:06,  2.21it/s] 83%|████████▎ | 67/81 [00:31<00:06,  2.20it/s] 84%|████████▍ | 68/81 [00:31<00:05,  2.18it/s] 85%|████████▌ | 69/81 [00:32<00:05,  2.10it/s] 86%|████████▋ | 70/81 [00:32<00:05,  2.10it/s] 88%|████████▊ | 71/81 [00:32<00:04,  2.11it/s] 89%|████████▉ | 72/81 [00:33<00:04,  2.11it/s] 90%|█████████ | 73/81 [00:33<00:03,  2.10it/s] 91%|█████████▏| 74/81 [00:34<00:03,  2.11it/s] 93%|█████████▎| 75/81 [00:34<00:02,  2.12it/s] 94%|█████████▍| 76/81 [00:35<00:02,  2.12it/s] 95%|█████████▌| 77/81 [00:35<00:01,  2.13it/s] 96%|█████████▋| 78/81 [00:36<00:01,  2.13it/s] 98%|█████████▊| 79/81 [00:36<00:00,  2.14it/s] 99%|█████████▉| 80/81 [00:37<00:00,  2.15it/s]100%|██████████| 81/81 [00:37<00:00,  2.15it/s]100%|██████████| 81/81 [00:37<00:00,  2.15it/s]
/u/dsciotti/code/Spaceborne/main.py:1484: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
  fig, ax = plt.subplots(1, 2, figsize=(10, 6))
...done in 0.63 m
Gauss. cov. matrices computed in 80.94 s
SSC not requested, setting it to zero
cNG term not requested, setting it to zero
Covariance matrices computed
Covariance matrices saved in /u/dsciotti/code/Spaceborne_bench/tmp

Testing cov_3x2pt_tot_2D...

Condition number = 8.2401e+13
Cholesky decomposition successful
Numpy inversion successful.
Inverse test successfully (M @ M^{-1} is identity). atol=1e-9, rtol=1e-7
Matrix is symmetric. atol=0, rtol=1e-7
Finished in 1.50 minutes

nz_src matches the benchmark ✅
sigma2_b matches the benchmark ✅
use_namaster matches the benchmark ✅
wf_delta matches the benchmark ✅
wf_gamma matches the benchmark ✅
wf_ia matches the benchmark ✅
wf_lensing_arr matches the benchmark ✅
wf_mu matches the benchmark ✅
z_grid matches the benchmark ✅
z_grid_trisp matches the benchmark ✅
cov WL tot = G + SSC + cNG ✅
cov WL tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅


🧪🧪🧪 Testing config_0002 🧪🧪🧪...

Keys not in common: {'wl_bins_filename', 'gc_bins_filename'}


Comparison failed for binning_type: The DType <class 'numpy._FloatAbstractDType'> could not be promoted by <class 'numpy.dtypes.StrDType'>. This means that no common DType exists for the given inputs. For example they cannot be stored in a single array unless the dtype is `object`. The full list of DTypes is: (<class 'numpy.dtypes.StrDType'>, <class 'numpy._FloatAbstractDType'>)
bnt_matrix matches the benchmark ✅
cl_3x2pt_5d matches the benchmark ✅
cl_gg_3d matches the benchmark ✅
cl_gl_3d matches the benchmark ✅
cl_ll_3d matches the benchmark ✅
cov_3x2pt_cng_2D matches the benchmark ✅
cov_3x2pt_g_2D matches the benchmark ✅
cov_3x2pt_ssc_2D matches the benchmark ✅
cov_3x2pt_tot_2D matches the benchmark ✅
cov_GC_cng_2D matches the benchmark ✅
cov_GC_g_2D matches the benchmark ✅
cov_GC_ssc_2D matches the benchmark ✅
cov_GC_tot_2D matches the benchmark ✅
cov_WL_cng_2D matches the benchmark ✅
cov_WL_g_2D matches the benchmark ✅
cov_WL_ssc_2D matches the benchmark ✅
cov_WL_tot_2D matches the benchmark ✅
cov_XC_cng_2D matches the benchmark ✅
cov_XC_g_2D matches the benchmark ✅
cov_XC_ssc_2D matches the benchmark ✅
cov_XC_tot_2D matches the benchmark ✅
d2CGG_dVddeltab matches the benchmark ✅
d2CGL_dVddeltab matches the benchmark ✅
d2CLL_dVddeltab matches the benchmark ✅
dPgg_ddeltab matches the benchmark ✅
dPgm_ddeltab matches the benchmark ✅
dPmm_ddeltab matches the benchmark ✅
delta_l_3x2pt matches the benchmark ✅
delta_l_GC matches the benchmark ✅
delta_l_WL matches the benchmark ✅
delta_l_XC matches the benchmark ✅
delta_l_ref matches the benchmark ✅
do_sample_cov matches the benchmark ✅
ell_edges_3x2pt matches the benchmark ✅
ell_edges_GC matches the benchmark ✅
ell_edges_WL matches the benchmark ✅
ell_edges_XC matches the benchmark ✅
ell_edges_ref matches the benchmark ✅
ell_max_3x2pt matches the benchmark ✅
ell_max_3x2pt_unb matches the benchmark ✅
ell_max_GC matches the benchmark ✅
ell_max_WL matches the benchmark ✅
ell_max_XC matches the benchmark ✅
ell_max_ref matches the benchmark ✅
ell_min_3x2pt matches the benchmark ✅
ell_min_GC matches the benchmark ✅
ell_min_WL matches the benchmark ✅
ell_min_XC matches the benchmark ✅
ell_min_ref matches the benchmark ✅
ells_3x2pt matches the benchmark ✅
ells_3x2pt_unb matches the benchmark ✅
ells_GC matches the benchmark ✅
ells_WL matches the benchmark ✅
ells_XC matches the benchmark ✅
ells_ref matches the benchmark ✅
gal_bias_2d matches the benchmark ✅
ind matches the benchmark ✅
k_grid matches the benchmark ✅
Comparison failed for k_grid_sigma2_b: 
Not equal to tolerance rtol=1e-05, atol=0
k_grid_sigma2_b doesn't match the benchmark ❌
(shapes (20000,), (0,) mismatch)
 x: array([1.000000e-05, 1.000806e-05, 1.001613e-05, ..., 9.983894e+01,
       9.991944e+01, 1.000000e+02])
 y: array([], dtype=float64)
mag_bias_2d matches the benchmark ✅
nbl_3x2pt matches the benchmark ✅
nbl_3x2pt_unb matches the benchmark ✅
nbl_GC matches the benchmark ✅
nbl_WL matches the benchmark ✅
nbl_XC matches the benchmark ✅
nbl_ref matches the benchmark ✅
nz_lns matches the benchmark ✅
nz_src matches the benchmark ✅
sigma2_b matches the benchmark ✅
use_namaster matches the benchmark ✅
wf_delta matches the benchmark ✅
wf_gamma matches the benchmark ✅
wf_ia matches the benchmark ✅
wf_lensing_arr matches the benchmark ✅
wf_mu matches the benchmark ✅
z_grid matches the benchmark ✅
z_grid_trisp matches the benchmark ✅
cov WL tot = G + SSC + cNG ✅
cov WL tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅


🧪🧪🧪 Testing config_0004 🧪🧪🧪...

Keys not in common: {'wl_bins_filename', 'gc_bins_filename'}


Comparison failed for binning_type: The DType <class 'numpy._FloatAbstractDType'> could not be promoted by <class 'numpy.dtypes.StrDType'>. This means that no common DType exists for the given inputs. For example they cannot be stored in a single array unless the dtype is `object`. The full list of DTypes is: (<class 'numpy.dtypes.StrDType'>, <class 'numpy._FloatAbstractDType'>)
bnt_matrix matches the benchmark ✅
cl_3x2pt_5d matches the benchmark ✅
cl_gg_3d matches the benchmark ✅
cl_gl_3d matches the benchmark ✅
cl_ll_3d matches the benchmark ✅
cov_3x2pt_cng_2D matches the benchmark ✅
cov_3x2pt_g_2D matches the benchmark ✅
cov_3x2pt_ssc_2D matches the benchmark ✅
cov_3x2pt_tot_2D matches the benchmark ✅
cov_GC_cng_2D matches the benchmark ✅
cov_GC_g_2D matches the benchmark ✅
cov_GC_ssc_2D matches the benchmark ✅
cov_GC_tot_2D matches the benchmark ✅
cov_WL_cng_2D matches the benchmark ✅
cov_WL_g_2D matches the benchmark ✅
cov_WL_ssc_2D matches the benchmark ✅
cov_WL_tot_2D matches the benchmark ✅
cov_XC_cng_2D matches the benchmark ✅
cov_XC_g_2D matches the benchmark ✅
cov_XC_ssc_2D matches the benchmark ✅
cov_XC_tot_2D matches the benchmark ✅
d2CGG_dVddeltab matches the benchmark ✅
d2CGL_dVddeltab matches the benchmark ✅
d2CLL_dVddeltab matches the benchmark ✅
dPgg_ddeltab matches the benchmark ✅
dPgm_ddeltab matches the benchmark ✅
dPmm_ddeltab matches the benchmark ✅
delta_l_3x2pt matches the benchmark ✅
delta_l_GC matches the benchmark ✅
delta_l_WL matches the benchmark ✅
delta_l_XC matches the benchmark ✅
do_sample_cov matches the benchmark ✅
ell_edges_3x2pt matches the benchmark ✅
ell_edges_GC matches the benchmark ✅
ell_edges_WL matches the benchmark ✅
ell_edges_XC matches the benchmark ✅
ell_max_3x2pt matches the benchmark ✅
ell_max_3x2pt_unb matches the benchmark ✅
ell_max_GC matches the benchmark ✅
ell_max_WL matches the benchmark ✅
ell_max_XC matches the benchmark ✅
ell_max_ref matches the benchmark ✅
ell_min_3x2pt matches the benchmark ✅
ell_min_GC matches the benchmark ✅
ell_min_WL matches the benchmark ✅
ell_min_XC matches the benchmark ✅
ell_min_ref matches the benchmark ✅
ells_3x2pt matches the benchmark ✅
ells_3x2pt_unb matches the benchmark ✅
ells_GC matches the benchmark ✅
ells_WL matches the benchmark ✅
ells_XC matches the benchmark ✅
gal_bias_2d matches the benchmark ✅
ind matches the benchmark ✅
k_grid matches the benchmark ✅
k_grid_sigma2_b matches the benchmark ✅
mag_bias_2d matches the benchmark ✅
nbl_3x2pt matches the benchmark ✅
nbl_3x2pt_unb matches the benchmark ✅
nbl_GC matches the benchmark ✅
nbl_WL matches the benchmark ✅
nbl_XC matches the benchmark ✅
nbl_ref matches the benchmark ✅
nmt_bin_obj_GC matches the benchmark ✅
nmt_bin_obj_WL matches the benchmark ✅
nz_lns matches the benchmark ✅
nz_src matches the benchmark ✅
sigma2_b matches the benchmark ✅
use_namaster matches the benchmark ✅
wf_delta matches the benchmark ✅
wf_gamma matches the benchmark ✅
wf_ia matches the benchmark ✅
wf_lensing_arr matches the benchmark ✅
wf_mu matches the benchmark ✅
z_grid matches the benchmark ✅
z_grid_trisp matches the benchmark ✅
cov WL tot = G + SSC + cNG ✅
cov WL tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅


🧪🧪🧪 Testing config_0005 🧪🧪🧪...

Keys not in common: {'wl_bins_filename', 'gc_bins_filename'}


Comparison failed for binning_type: The DType <class 'numpy._FloatAbstractDType'> could not be promoted by <class 'numpy.dtypes.StrDType'>. This means that no common DType exists for the given inputs. For example they cannot be stored in a single array unless the dtype is `object`. The full list of DTypes is: (<class 'numpy.dtypes.StrDType'>, <class 'numpy._FloatAbstractDType'>)sys:1: UserWarning: the number of steps in the redshift grid is small, you may want to consider increasing it
/u/dsciotti/code/Spaceborne/main.py:1484: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
  fig, ax = plt.subplots(1, 2, figsize=(10, 6))
   _____                       __                        
  / ___/____  ____ _________  / /_  ____  _________  ___ 
  \__ \/ __ \/ __ `/ ___/ _ \/ __ \/ __ \/ ___/ __ \/ _ \
 ___/ / /_/ / /_/ / /__/  __/ /_/ / /_/ / /  / / / /  __/
/____/ .___/\__,_/\___/\___/_.___/\____/_/  /_/ /_/\___/ 
    /_/                                                  

Generating a polar cap mask with area 13245 deg^2 and nside 1024
Angular radius of the cap: 69.0309 deg
fsky = 0.3211
Computing Cls...
done in 2.85 s
Gauss. cov. matrices computed in 0.02 s
SSC not requested, setting it to zero
cNG term not requested, setting it to zero
Covariance matrices computed
Covariance matrices saved in /u/dsciotti/code/Spaceborne_bench/tmp

Testing cov_3x2pt_tot_2D...

Condition number = 5.2730e+13
Cholesky decomposition successful
Numpy inversion successful.
Inverse test successfully (M @ M^{-1} is identity). atol=1e-9, rtol=1e-7
Matrix is symmetric. atol=0, rtol=1e-7
Finished in 0.13 minutes
sys:1: UserWarning: the number of steps in the redshift grid is small, you may want to consider increasing it
/u/dsciotti/code/Spaceborne/main.py:1484: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
  fig, ax = plt.subplots(1, 2, figsize=(10, 6))
   _____                       __                        
  / ___/____  ____ _________  / /_  ____  _________  ___ 
  \__ \/ __ \/ __ `/ ___/ _ \/ __ \/ __ \/ ___/ __ \/ _ \
 ___/ / /_/ / /_/ / /__/  __/ /_/ / /_/ / /  / / / /  __/
/____/ .___/\__,_/\___/\___/_.___/\____/_/  /_/ /_/\___/ 
    /_/                                                  

Generating a polar cap mask with area 13245 deg^2 and nside 1024
Angular radius of the cap: 69.0309 deg
fsky = 0.3211
Computing Cls...
done in 2.78 s
Gauss. cov. matrices computed in 0.02 s
SSC not requested, setting it to zero
cNG term not requested, setting it to zero
Covariance matrices computed
Covariance matrices saved in /u/dsciotti/code/Spaceborne_bench/tmp

Testing cov_3x2pt_tot_2D...

Condition number = 5.2730e+13
Cholesky decomposition successful
Numpy inversion successful.
Inverse test successfully (M @ M^{-1} is identity). atol=1e-9, rtol=1e-7
Matrix is symmetric. atol=0, rtol=1e-7
Finished in 0.16 minutes

bnt_matrix matches the benchmark ✅
cl_3x2pt_5d matches the benchmark ✅
cl_gg_3d matches the benchmark ✅
cl_gl_3d matches the benchmark ✅
cl_ll_3d matches the benchmark ✅
cov_3x2pt_cng_2D matches the benchmark ✅
cov_3x2pt_g_2D matches the benchmark ✅
cov_3x2pt_ssc_2D matches the benchmark ✅
cov_3x2pt_tot_2D matches the benchmark ✅
cov_GC_cng_2D matches the benchmark ✅
cov_GC_g_2D matches the benchmark ✅
cov_GC_ssc_2D matches the benchmark ✅
cov_GC_tot_2D matches the benchmark ✅
cov_WL_cng_2D matches the benchmark ✅
cov_WL_g_2D matches the benchmark ✅
cov_WL_ssc_2D matches the benchmark ✅
cov_WL_tot_2D matches the benchmark ✅
cov_XC_cng_2D matches the benchmark ✅
cov_XC_g_2D matches the benchmark ✅
cov_XC_ssc_2D matches the benchmark ✅
cov_XC_tot_2D matches the benchmark ✅
d2CGG_dVddeltab matches the benchmark ✅
d2CGL_dVddeltab matches the benchmark ✅
d2CLL_dVddeltab matches the benchmark ✅
dPgg_ddeltab matches the benchmark ✅
dPgm_ddeltab matches the benchmark ✅
dPmm_ddeltab matches the benchmark ✅
delta_l_3x2pt matches the benchmark ✅
delta_l_GC matches the benchmark ✅
delta_l_WL matches the benchmark ✅
delta_l_XC matches the benchmark ✅
do_sample_cov matches the benchmark ✅
ell_edges_3x2pt matches the benchmark ✅
ell_edges_GC matches the benchmark ✅
ell_edges_WL matches the benchmark ✅
ell_edges_XC matches the benchmark ✅
ell_max_3x2pt matches the benchmark ✅
ell_max_3x2pt_unb matches the benchmark ✅
ell_max_GC matches the benchmark ✅
ell_max_WL matches the benchmark ✅
ell_max_XC matches the benchmark ✅
ell_max_ref matches the benchmark ✅
ell_min_3x2pt matches the benchmark ✅
ell_min_GC matches the benchmark ✅
ell_min_WL matches the benchmark ✅
ell_min_XC matches the benchmark ✅
ell_min_ref matches the benchmark ✅
ells_3x2pt matches the benchmark ✅
ells_3x2pt_unb matches the benchmark ✅
ells_GC matches the benchmark ✅
ells_WL matches the benchmark ✅
ells_XC matches the benchmark ✅
gal_bias_2d matches the benchmark ✅
ind matches the benchmark ✅
k_grid matches the benchmark ✅
k_grid_sigma2_b matches the benchmark ✅
mag_bias_2d matches the benchmark ✅
nbl_3x2pt matches the benchmark ✅
nbl_3x2pt_unb matches the benchmark ✅
nbl_GC matches the benchmark ✅
nbl_WL matches the benchmark ✅
nbl_XC matches the benchmark ✅
nbl_ref matches the benchmark ✅
nmt_bin_obj_GC matches the benchmark ✅
nmt_bin_obj_WL matches the benchmark ✅
nz_lns matches the benchmark ✅
nz_src matches the benchmark ✅
sigma2_b matches the benchmark ✅
use_namaster matches the benchmark ✅
wf_delta matches the benchmark ✅
wf_gamma matches the benchmark ✅
wf_ia matches the benchmark ✅
wf_lensing_arr matches the benchmark ✅
wf_mu matches the benchmark ✅
z_grid matches the benchmark ✅
z_grid_trisp matches the benchmark ✅
cov WL tot = G + SSC + cNG ✅
cov WL tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅


🧪🧪🧪 Testing config_0006 🧪🧪🧪...

Keys not in common: {'wl_bins_filename', 'gc_bins_filename'}


Comparison failed for binning_type: The DType <class 'numpy._FloatAbstractDType'> could not be promoted by <class 'numpy.dtypes.StrDType'>. This means that no common DType exists for the given inputs. For example they cannot be stored in a single array unless the dtype is `object`. The full list of DTypes is: (<class 'numpy.dtypes.StrDType'>, <class 'numpy._FloatAbstractDType'>)
bnt_matrix matches the benchmark ✅
cl_3x2pt_5d matches the benchmark ✅
cl_gg_3d matches the benchmark ✅
cl_gl_3d matches the benchmark ✅
cl_ll_3d matches the benchmark ✅
cov_3x2pt_cng_2D matches the benchmark ✅
cov_3x2pt_g_2D matches the benchmark ✅
cov_3x2pt_ssc_2D matches the benchmark ✅
cov_3x2pt_tot_2D matches the benchmark ✅
cov_GC_cng_2D matches the benchmark ✅
cov_GC_g_2D matches the benchmark ✅
cov_GC_ssc_2D matches the benchmark ✅
cov_GC_tot_2D matches the benchmark ✅
cov_WL_cng_2D matches the benchmark ✅
cov_WL_g_2D matches the benchmark ✅
cov_WL_ssc_2D matches the benchmark ✅
cov_WL_tot_2D matches the benchmark ✅
cov_XC_cng_2D matches the benchmark ✅
cov_XC_g_2D matches the benchmark ✅
cov_XC_ssc_2D matches the benchmark ✅
cov_XC_tot_2D matches the benchmark ✅
d2CGG_dVddeltab matches the benchmark ✅
d2CGL_dVddeltab matches the benchmark ✅
d2CLL_dVddeltab matches the benchmark ✅
dPgg_ddeltab matches the benchmark ✅
dPgm_ddeltab matches the benchmark ✅
dPmm_ddeltab matches the benchmark ✅
delta_l_3x2pt matches the benchmark ✅
delta_l_GC matches the benchmark ✅
delta_l_WL matches the benchmark ✅
delta_l_XC matches the benchmark ✅
delta_l_ref matches the benchmark ✅
do_sample_cov matches the benchmark ✅
ell_edges_3x2pt matches the benchmark ✅
ell_edges_GC matches the benchmark ✅
ell_edges_WL matches the benchmark ✅
ell_edges_XC matches the benchmark ✅
ell_edges_ref matches the benchmark ✅
ell_max_3x2pt matches the benchmark ✅
ell_max_3x2pt_unb matches the benchmark ✅
ell_max_GC matches the benchmark ✅
ell_max_WL matches the benchmark ✅
ell_max_XC matches the benchmark ✅
ell_max_ref matches the benchmark ✅
ell_min_3x2pt matches the benchmark ✅
ell_min_GC matches the benchmark ✅
ell_min_WL matches the benchmark ✅
ell_min_XC matches the benchmark ✅
ell_min_ref matches the benchmark ✅
ells_3x2pt matches the benchmark ✅
ells_3x2pt_unb matches the benchmark ✅
ells_GC matches the benchmark ✅
ells_WL matches the benchmark ✅
ells_XC matches the benchmark ✅
ells_ref matches the benchmark ✅
gal_bias_2d matches the benchmark ✅
ind matches the benchmark ✅
k_grid matches the benchmark ✅
k_grid_sigma2_b matches the benchmark ✅
mag_bias_2d matches the benchmark ✅
nbl_3x2pt matches the benchmark ✅
nbl_3x2pt_unb matches the benchmark ✅
nbl_GC matches the benchmark ✅
nbl_WL matches the benchmark ✅
nbl_XC matches the benchmark ✅
nbl_ref matches the benchmark ✅
nz_lns matches the benchmark ✅
nz_src matches the benchmark ✅
sigma2_b matches the benchmark ✅
use_namaster matches the benchmark ✅
wf_delta matches the benchmark ✅
wf_gamma matches the benchmark ✅
wf_ia matches the benchmark ✅
wf_lensing_arr matches the benchmark ✅
wf_mu matches the benchmark ✅
z_grid matches the benchmark ✅
z_grid_trisp matches the benchmark ✅
cov WL tot = G + SSC + cNG ✅
cov WL tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅


🧪🧪🧪 Testing config_0007 🧪🧪🧪...

Keys not in common: {'wl_bins_filename', 'gc_bins_filename'}


Comparison failed for binning_type: The DType <class 'numpy._FloatAbstractDType'> could not be promoted by <class 'numpy.dtypes.StrDType'>. This means that no common DType exists for the given inputs. For example they cannot be stored in a single array unless the dtype is `object`. The full list of DTypes is: (<class 'numpy.dtypes.StrDType'>, <class 'numpy._FloatAbstractDType'>)
bnt_matrix matches the benchmark ✅
cl_3x2pt_5d matches the benchmark ✅
cl_gg_3d matches the benchmark ✅
cl_gl_3d matches the benchmark ✅
cl_ll_3d matches the benchmark ✅
cov_3x2pt_cng_2D matches the benchmark ✅
cov_3x2pt_g_2D matches the benchmark ✅
cov_3x2pt_mix_2D matches the benchmark ✅
cov_3x2pt_sn_2D matches the benchmark ✅
cov_3x2pt_ssc_2D matches the benchmark ✅
cov_3x2pt_sva_2D matches the benchmark ✅
cov_3x2pt_tot_2D matches the benchmark ✅
cov_GC_cng_2D matches the benchmark ✅
cov_GC_g_2D matches the benchmark ✅
cov_GC_mix_2D matches the benchmark ✅
cov_GC_sn_2D matches the benchmark ✅
cov_GC_ssc_2D matches the benchmark ✅
cov_GC_sva_2D matches the benchmark ✅
cov_GC_tot_2D matches the benchmark ✅
cov_WL_cng_2D matches the benchmark ✅
cov_WL_g_2D matches the benchmark ✅
cov_WL_mix_2D matches the benchmark ✅
cov_WL_sn_2D matches the benchmark ✅
cov_WL_ssc_2D matches the benchmark ✅
cov_WL_sva_2D matches the benchmark ✅
cov_WL_tot_2D matches the benchmark ✅sys:1: UserWarning: the number of steps in the redshift grid is small, you may want to consider increasing it
   _____                       __                        
  / ___/____  ____ _________  / /_  ____  _________  ___ 
  \__ \/ __ \/ __ `/ ___/ _ \/ __ \/ __ \/ ___/ __ \/ _ \
 ___/ / /_/ / /_/ / /__/  __/ /_/ / /_/ / /  / / / /  __/
/____/ .___/\__,_/\___/\___/_.___/\____/_/  /_/ /_/\___/ 
    /_/                                                  

Generating a polar cap mask with area 13245 deg^2 and nside 1024
Angular radius of the cap: 69.0309 deg
fsky = 0.3211
Computing Cls...
done in 2.66 s
Computing cov workspace coupling coefficients...
...done in 15.74 s
Computing decoupled spin0 partial-sky Gaussian covariance with NaMaster...
  0%|          | 0/81 [00:00<?, ?it/s]  1%|          | 1/81 [00:00<00:39,  2.03it/s]  2%|▏         | 2/81 [00:00<00:39,  2.02it/s]  4%|▎         | 3/81 [00:01<00:38,  2.02it/s]  5%|▍         | 4/81 [00:01<00:38,  2.02it/s]  6%|▌         | 5/81 [00:02<00:37,  2.03it/s]  7%|▋         | 6/81 [00:02<00:36,  2.03it/s]  9%|▊         | 7/81 [00:03<00:36,  2.03it/s] 10%|▉         | 8/81 [00:03<00:35,  2.03it/s] 11%|█         | 9/81 [00:04<00:35,  2.01it/s] 12%|█▏        | 10/81 [00:04<00:35,  2.01it/s] 14%|█▎        | 11/81 [00:05<00:34,  2.01it/s] 15%|█▍        | 12/81 [00:05<00:34,  2.02it/s] 16%|█▌        | 13/81 [00:06<00:33,  2.02it/s] 17%|█▋        | 14/81 [00:06<00:32,  2.03it/s] 19%|█▊        | 15/81 [00:07<00:32,  2.04it/s] 20%|█▉        | 16/81 [00:07<00:31,  2.03it/s] 21%|██        | 17/81 [00:08<00:31,  2.03it/s] 22%|██▏       | 18/81 [00:08<00:31,  2.03it/s] 23%|██▎       | 19/81 [00:09<00:30,  2.03it/s] 25%|██▍       | 20/81 [00:09<00:30,  2.03it/s] 26%|██▌       | 21/81 [00:10<00:29,  2.02it/s] 27%|██▋       | 22/81 [00:10<00:29,  2.01it/s] 28%|██▊       | 23/81 [00:11<00:29,  2.00it/s] 30%|██▉       | 24/81 [00:11<00:28,  2.01it/s] 31%|███       | 25/81 [00:12<00:27,  2.00it/s] 32%|███▏      | 26/81 [00:12<00:27,  2.01it/s] 33%|███▎      | 27/81 [00:13<00:26,  2.01it/s] 35%|███▍      | 28/81 [00:13<00:26,  2.01it/s] 36%|███▌      | 29/81 [00:14<00:25,  2.02it/s] 37%|███▋      | 30/81 [00:14<00:25,  2.03it/s] 38%|███▊      | 31/81 [00:15<00:24,  2.02it/s] 40%|███▉      | 32/81 [00:15<00:24,  2.02it/s] 41%|████      | 33/81 [00:16<00:23,  2.01it/s] 42%|████▏     | 34/81 [00:16<00:23,  2.02it/s] 43%|████▎     | 35/81 [00:17<00:22,  2.01it/s] 44%|████▍     | 36/81 [00:17<00:22,  2.02it/s] 46%|████▌     | 37/81 [00:18<00:21,  2.03it/s] 47%|████▋     | 38/81 [00:18<00:20,  2.05it/s] 48%|████▊     | 39/81 [00:19<00:20,  2.06it/s] 49%|████▉     | 40/81 [00:19<00:19,  2.07it/s] 51%|█████     | 41/81 [00:20<00:19,  2.07it/s] 52%|█████▏    | 42/81 [00:20<00:18,  2.05it/s] 53%|█████▎    | 43/81 [00:21<00:18,  2.03it/s] 54%|█████▍    | 44/81 [00:21<00:18,  2.03it/s] 56%|█████▌    | 45/81 [00:22<00:17,  2.02it/s] 57%|█████▋    | 46/81 [00:22<00:17,  2.03it/s] 58%|█████▊    | 47/81 [00:23<00:16,  2.03it/s] 59%|█████▉    | 48/81 [00:23<00:16,  2.03it/s] 60%|██████    | 49/81 [00:24<00:15,  2.04it/s] 62%|██████▏   | 50/81 [00:24<00:15,  2.04it/s] 63%|██████▎   | 51/81 [00:25<00:14,  2.05it/s] 64%|██████▍   | 52/81 [00:25<00:14,  2.05it/s] 65%|██████▌   | 53/81 [00:26<00:13,  2.05it/s] 67%|██████▋   | 54/81 [00:26<00:13,  2.05it/s] 68%|██████▊   | 55/81 [00:27<00:12,  2.04it/s] 69%|██████▉   | 56/81 [00:27<00:12,  2.03it/s] 70%|███████   | 57/81 [00:28<00:11,  2.02it/s] 72%|███████▏  | 58/81 [00:28<00:11,  2.03it/s] 73%|███████▎  | 59/81 [00:29<00:10,  2.03it/s] 74%|███████▍  | 60/81 [00:29<00:10,  2.03it/s] 75%|███████▌  | 61/81 [00:30<00:09,  2.03it/s] 77%|███████▋  | 62/81 [00:30<00:09,  2.03it/s] 78%|███████▊  | 63/81 [00:31<00:08,  2.03it/s] 79%|███████▉  | 64/81 [00:31<00:08,  2.04it/s] 80%|████████  | 65/81 [00:32<00:07,  2.05it/s] 81%|████████▏ | 66/81 [00:32<00:07,  2.04it/s] 83%|████████▎ | 67/81 [00:33<00:06,  2.04it/s] 84%|████████▍ | 68/81 [00:33<00:06,  2.02it/s] 85%|████████▌ | 69/81 [00:34<00:05,  2.03it/s] 86%|████████▋ | 70/81 [00:34<00:05,  2.03it/s] 88%|████████▊ | 71/81 [00:34<00:04,  2.02it/s] 89%|████████▉ | 72/81 [00:35<00:04,  2.03it/s] 90%|█████████ | 73/81 [00:35<00:03,  2.03it/s] 91%|█████████▏| 74/81 [00:36<00:03,  2.03it/s] 93%|█████████▎| 75/81 [00:36<00:02,  2.01it/s] 94%|█████████▍| 76/81 [00:37<00:02,  1.99it/s] 95%|█████████▌| 77/81 [00:37<00:02,  1.99it/s] 96%|█████████▋| 78/81 [00:38<00:01,  2.00it/s] 98%|█████████▊| 79/81 [00:38<00:01,  2.00it/s] 99%|█████████▉| 80/81 [00:39<00:00,  1.99it/s]100%|██████████| 81/81 [00:40<00:00,  1.97it/s]100%|██████████| 81/81 [00:40<00:00,  2.02it/s]
/u/dsciotti/code/Spaceborne/main.py:1484: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
  fig, ax = plt.subplots(1, 2, figsize=(10, 6))
...done in 0.67 m
Gauss. cov. matrices computed in 83.22 s
SSC not requested, setting it to zero
cNG term not requested, setting it to zero
Covariance matrices computed
Covariance matrices saved in /u/dsciotti/code/Spaceborne_bench/tmp

Testing cov_3x2pt_tot_2D...

Condition number = 8.2412e+13
Cholesky decomposition successful
Numpy inversion successful.
Inverse test successfully (M @ M^{-1} is identity). atol=1e-9, rtol=1e-7
Matrix is symmetric. atol=0, rtol=1e-7
Finished in 1.53 minutes
sys:1: UserWarning: the number of steps in the redshift grid is small, you may want to consider increasing it
   _____                       __                        
  / ___/____  ____ _________  / /_  ____  _________  ___ 
  \__ \/ __ \/ __ `/ ___/ _ \/ __ \/ __ \/ ___/ __ \/ _ \
 ___/ / /_/ / /_/ / /__/  __/ /_/ / /_/ / /  / / / /  __/
/____/ .___/\__,_/\___/\___/_.___/\____/_/  /_/ /_/\___/ 
    /_/                                                  

Generating a polar cap mask with area 13245 deg^2 and nside 1024
Angular radius of the cap: 69.0309 deg
fsky = 0.3211
Computing Cls...
done in 3.01 s
Computing cov workspace coupling coefficients...
...done in 15.39 s
Computing decoupled spin0 partial-sky Gaussian covariance with NaMaster...
  0%|          | 0/81 [00:00<?, ?it/s]  1%|          | 1/81 [00:00<00:09,  8.16it/s]  2%|▏         | 2/81 [00:00<00:09,  8.09it/s]  4%|▎         | 3/81 [00:00<00:09,  7.90it/s]  5%|▍         | 4/81 [00:00<00:09,  7.88it/s]  6%|▌         | 5/81 [00:00<00:09,  7.78it/s]  7%|▋         | 6/81 [00:00<00:09,  7.88it/s]  9%|▊         | 7/81 [00:00<00:09,  7.74it/s] 10%|▉         | 8/81 [00:01<00:09,  7.80it/s] 11%|█         | 9/81 [00:01<00:09,  7.67it/s] 12%|█▏        | 10/81 [00:01<00:09,  7.58it/s] 14%|█▎        | 11/81 [00:01<00:09,  7.70it/s] 15%|█▍        | 12/81 [00:01<00:08,  7.69it/s] 16%|█▌        | 13/81 [00:01<00:08,  7.77it/s] 17%|█▋        | 14/81 [00:01<00:08,  7.87it/s] 19%|█▊        | 15/81 [00:01<00:08,  7.93it/s] 20%|█▉        | 16/81 [00:02<00:08,  7.99it/s] 21%|██        | 17/81 [00:02<00:08,  7.94it/s] 22%|██▏       | 18/81 [00:02<00:07,  8.01it/s] 23%|██▎       | 19/81 [00:02<00:07,  7.88it/s] 25%|██▍       | 20/81 [00:02<00:07,  7.77it/s] 26%|██▌       | 21/81 [00:02<00:07,  7.69it/s] 27%|██▋       | 22/81 [00:02<00:07,  7.70it/s] 28%|██▊       | 23/81 [00:02<00:07,  7.76it/s] 30%|██▉       | 24/81 [00:03<00:07,  7.83it/s] 31%|███       | 25/81 [00:03<00:07,  7.77it/s] 32%|███▏      | 26/81 [00:03<00:07,  7.83it/s] 33%|███▎      | 27/81 [00:03<00:06,  7.85it/s] 35%|███▍      | 28/81 [00:03<00:06,  7.87it/s] 36%|███▌      | 29/81 [00:03<00:06,  7.90it/s] 37%|███▋      | 30/81 [00:03<00:06,  7.94it/s] 38%|███▊      | 31/81 [00:03<00:06,  7.89it/s] 40%|███▉      | 32/81 [00:04<00:06,  7.80it/s] 41%|████      | 33/81 [00:04<00:06,  7.85it/s] 42%|████▏     | 34/81 [00:04<00:05,  7.86it/s] 43%|████▎     | 35/81 [00:04<00:05,  7.79it/s] 44%|████▍     | 36/81 [00:04<00:05,  7.74it/s] 46%|████▌     | 37/81 [00:04<00:05,  7.76it/s] 47%|████▋     | 38/81 [00:04<00:05,  7.88it/s] 48%|████▊     | 39/81 [00:04<00:05,  7.93it/s] 49%|████▉     | 40/81 [00:05<00:05,  7.90it/s] 51%|█████     | 41/81 [00:05<00:05,  7.90it/s] 52%|█████▏    | 42/81 [00:05<00:04,  7.90it/s] 53%|█████▎    | 43/81 [00:05<00:04,  7.72it/s] 54%|█████▍    | 44/81 [00:05<00:04,  7.84it/s] 56%|█████▌    | 45/81 [00:05<00:04,  7.88it/s] 57%|█████▋    | 46/81 [00:05<00:04,  7.93it/s] 58%|█████▊    | 47/81 [00:05<00:04,  7.86it/s] 59%|█████▉    | 48/81 [00:06<00:04,  7.82it/s] 60%|██████    | 49/81 [00:06<00:04,  7.92it/s] 62%|██████▏   | 50/81 [00:06<00:03,  7.98it/s] 63%|██████▎   | 51/81 [00:06<00:03,  8.00it/s] 64%|██████▍   | 52/81 [00:06<00:03,  7.94it/s] 65%|██████▌   | 53/81 [00:06<00:03,  7.79it/s] 67%|██████▋   | 54/81 [00:06<00:03,  7.80it/s] 68%|██████▊   | 55/81 [00:07<00:03,  7.81it/s] 69%|██████▉   | 56/81 [00:07<00:03,  7.87it/s] 70%|███████   | 57/81 [00:07<00:03,  7.82it/s] 72%|███████▏  | 58/81 [00:07<00:02,  7.71it/s] 73%|███████▎  | 59/81 [00:07<00:02,  7.69it/s] 74%|███████▍  | 60/81 [00:07<00:02,  7.70it/s] 75%|███████▌  | 61/81 [00:07<00:02,  7.78it/s] 77%|███████▋  | 62/81 [00:07<00:02,  7.67it/s] 78%|███████▊  | 63/81 [00:08<00:02,  7.54it/s] 79%|███████▉  | 64/81 [00:08<00:02,  7.46it/s] 80%|████████  | 65/81 [00:08<00:02,  7.33it/s] 81%|████████▏ | 66/81 [00:08<00:02,  7.27it/s] 83%|████████▎ | 67/81 [00:08<00:01,  7.23it/s] 84%|████████▍ | 68/81 [00:08<00:01,  7.22it/s] 85%|████████▌ | 69/81 [00:08<00:01,  7.43it/s] 86%|████████▋ | 70/81 [00:09<00:01,  7.56it/s] 88%|████████▊ | 71/81 [00:09<00:01,  7.63it/s] 89%|████████▉ | 72/81 [00:09<00:01,  7.60it/s] 90%|█████████ | 73/81 [00:09<00:01,  7.57it/s] 91%|█████████▏| 74/81 [00:09<00:00,  7.54it/s] 93%|█████████▎| 75/81 [00:09<00:00,  7.57it/s] 94%|█████████▍| 76/81 [00:09<00:00,  7.61it/s] 95%|█████████▌| 77/81 [00:09<00:00,  7.63it/s] 96%|█████████▋| 78/81 [00:10<00:00,  7.61it/s] 98%|█████████▊| 79/81 [00:10<00:00,  7.61it/s] 99%|█████████▉| 80/81 [00:10<00:00,  7.62it/s]100%|██████████| 81/81 [00:10<00:00,  7.61it/s]100%|██████████| 81/81 [00:10<00:00,  7.74it/s]
/u/dsciotti/code/Spaceborne/main.py:1484: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
  fig, ax = plt.subplots(1, 2, figsize=(10, 6))
...done in 0.17 m
Gauss. cov. matrices computed in 52.83 s
SSC not requested, setting it to zero
cNG term not requested, setting it to zero
Covariance matrices computed
Covariance matrices saved in /u/dsciotti/code/Spaceborne_bench/tmp

Testing cov_3x2pt_tot_2D...

Condition number = 2.5168e+10
Cholesky decomposition successful
Numpy inversion successful.
Inverse test successfully (M @ M^{-1} is identity). atol=1e-9, rtol=1e-7
Matrix is symmetric. atol=0, rtol=1e-7
Finished in 1.03 minutes

cov_XC_cng_2D matches the benchmark ✅
cov_XC_g_2D matches the benchmark ✅
cov_XC_mix_2D matches the benchmark ✅
cov_XC_sn_2D matches the benchmark ✅
cov_XC_ssc_2D matches the benchmark ✅
cov_XC_sva_2D matches the benchmark ✅
cov_XC_tot_2D matches the benchmark ✅
d2CGG_dVddeltab matches the benchmark ✅
d2CGL_dVddeltab matches the benchmark ✅
d2CLL_dVddeltab matches the benchmark ✅
dPgg_ddeltab matches the benchmark ✅
dPgm_ddeltab matches the benchmark ✅
dPmm_ddeltab matches the benchmark ✅
delta_l_3x2pt matches the benchmark ✅
delta_l_GC matches the benchmark ✅
delta_l_WL matches the benchmark ✅
delta_l_XC matches the benchmark ✅
delta_l_ref matches the benchmark ✅
do_sample_cov matches the benchmark ✅
ell_edges_3x2pt matches the benchmark ✅
ell_edges_GC matches the benchmark ✅
ell_edges_WL matches the benchmark ✅
ell_edges_XC matches the benchmark ✅
ell_edges_ref matches the benchmark ✅
ell_max_3x2pt matches the benchmark ✅
ell_max_3x2pt_unb matches the benchmark ✅
ell_max_GC matches the benchmark ✅
ell_max_WL matches the benchmark ✅
ell_max_XC matches the benchmark ✅
ell_max_ref matches the benchmark ✅
ell_min_3x2pt matches the benchmark ✅
ell_min_GC matches the benchmark ✅
ell_min_WL matches the benchmark ✅
ell_min_XC matches the benchmark ✅
ell_min_ref matches the benchmark ✅
ells_3x2pt matches the benchmark ✅
ells_3x2pt_unb matches the benchmark ✅
ells_GC matches the benchmark ✅
ells_WL matches the benchmark ✅
ells_XC matches the benchmark ✅
ells_ref matches the benchmark ✅
gal_bias_2d matches the benchmark ✅
ind matches the benchmark ✅
k_grid matches the benchmark ✅
k_grid_sigma2_b matches the benchmark ✅
mag_bias_2d matches the benchmark ✅
nbl_3x2pt matches the benchmark ✅
nbl_3x2pt_unb matches the benchmark ✅
nbl_GC matches the benchmark ✅
nbl_WL matches the benchmark ✅
nbl_XC matches the benchmark ✅
nbl_ref matches the benchmark ✅
nz_lns matches the benchmark ✅
nz_src matches the benchmark ✅
sigma2_b matches the benchmark ✅
use_namaster matches the benchmark ✅
wf_delta matches the benchmark ✅
wf_gamma matches the benchmark ✅
wf_ia matches the benchmark ✅
wf_lensing_arr matches the benchmark ✅
wf_mu matches the benchmark ✅
z_grid matches the benchmark ✅
z_grid_trisp matches the benchmark ✅
cov WL tot = G + SSC + cNG ✅
cov WL tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅


🧪🧪🧪 Testing config_0008 🧪🧪🧪...

Keys not in common: {'wl_bins_filename', 'gc_bins_filename'}


Comparison failed for binning_type: The DType <class 'numpy._FloatAbstractDType'> could not be promoted by <class 'numpy.dtypes.StrDType'>. This means that no common DType exists for the given inputs. For example they cannot be stored in a single array unless the dtype is `object`. The full list of DTypes is: (<class 'numpy.dtypes.StrDType'>, <class 'numpy._FloatAbstractDType'>)
bnt_matrix matches the benchmark ✅
cl_3x2pt_5d matches the benchmark ✅
cl_gg_3d matches the benchmark ✅
cl_gl_3d matches the benchmark ✅
cl_ll_3d matches the benchmark ✅
cov_3x2pt_cng_2D matches the benchmark ✅
cov_3x2pt_g_2D matches the benchmark ✅
cov_3x2pt_ssc_2D matches the benchmark ✅
cov_3x2pt_tot_2D matches the benchmark ✅
cov_GC_cng_2D matches the benchmark ✅
cov_GC_g_2D matches the benchmark ✅
cov_GC_ssc_2D matches the benchmark ✅
cov_GC_tot_2D matches the benchmark ✅
cov_WL_cng_2D matches the benchmark ✅
cov_WL_g_2D matches the benchmark ✅
cov_WL_ssc_2D matches the benchmark ✅
cov_WL_tot_2D matches the benchmark ✅
cov_XC_cng_2D matches the benchmark ✅
cov_XC_g_2D matches the benchmark ✅
cov_XC_ssc_2D matches the benchmark ✅
cov_XC_tot_2D matches the benchmark ✅
d2CGG_dVddeltab matches the benchmark ✅
d2CGL_dVddeltab matches the benchmark ✅
d2CLL_dVddeltab matches the benchmark ✅
dPgg_ddeltab matches the benchmark ✅
dPgm_ddeltab matches the benchmark ✅
dPmm_ddeltab matches the benchmark ✅
delta_l_3x2pt matches the benchmark ✅
delta_l_GC matches the benchmark ✅
delta_l_WL matches the benchmark ✅
delta_l_XC matches the benchmark ✅
do_sample_cov matches the benchmark ✅
ell_edges_3x2pt matches the benchmark ✅
ell_edges_GC matches the benchmark ✅
ell_edges_WL matches the benchmark ✅
ell_edges_XC matches the benchmark ✅
ell_max_3x2pt matches the benchmark ✅
ell_max_3x2pt_unb matches the benchmark ✅
ell_max_GC matches the benchmark ✅
ell_max_WL matches the benchmark ✅
ell_max_XC matches the benchmark ✅
ell_max_ref matches the benchmark ✅
ell_min_3x2pt matches the benchmark ✅
ell_min_GC matches the benchmark ✅
ell_min_WL matches the benchmark ✅
ell_min_XC matches the benchmark ✅
ell_min_ref matches the benchmark ✅
ells_3x2pt matches the benchmark ✅
ells_3x2pt_unb matches the benchmark ✅
ells_GC matches the benchmark ✅
ells_WL matches the benchmark ✅
ells_XC matches the benchmark ✅
gal_bias_2d matches the benchmark ✅
ind matches the benchmark ✅
k_grid matches the benchmark ✅
k_grid_sigma2_b matches the benchmark ✅
mag_bias_2d matches the benchmark ✅
nbl_3x2pt matches the benchmark ✅
nbl_3x2pt_unb matches the benchmark ✅
nbl_GC matches the benchmark ✅
nbl_WL matches the benchmark ✅
nbl_XC matches the benchmark ✅
nbl_ref matches the benchmark ✅
nmt_bin_obj_GC matches the benchmark ✅
nmt_bin_obj_WL matches the benchmark ✅
nz_lns matches the benchmark ✅
nz_src matches the benchmark ✅
sigma2_b matches the benchmark ✅
use_namaster matches the benchmark ✅
wf_delta matches the benchmark ✅
wf_gamma matches the benchmark ✅
wf_ia matches the benchmark ✅
wf_lensing_arr matches the benchmark ✅
wf_mu matches the benchmark ✅
z_grid matches the benchmark ✅
z_grid_trisp matches the benchmark ✅
cov WL tot = G + SSC + cNG ✅
cov WL tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅


🧪🧪🧪 Testing config_0009 🧪🧪🧪...

Keys not in common: {'wl_bins_filename', 'gc_bins_filename'}


Comparison failed for binning_type: The DType <class 'numpy._FloatAbstractDType'> could not be promoted by <class 'numpy.dtypes.StrDType'>. This means that no common DType exists for the given inputs. For example they cannot be stored in a single array unless the dtype is `object`. The full list of DTypes is: (<class 'numpy.dtypes.StrDType'>, <class 'numpy._FloatAbstractDType'>)
bnt_matrix matches the benchmark ✅
cl_3x2pt_5d matches the benchmark ✅
cl_gg_3d matches the benchmark ✅
cl_gl_3d matches the benchmark ✅
cl_ll_3d matches the benchmark ✅
cov_3x2pt_cng_2D matches the benchmark ✅
cov_3x2pt_g_2D matches the benchmark ✅
cov_3x2pt_ssc_2D matches the benchmark ✅
cov_3x2pt_tot_2D matches the benchmark ✅
cov_GC_cng_2D matches the benchmark ✅
cov_GC_g_2D matches the benchmark ✅
cov_GC_ssc_2D matches the benchmark ✅
cov_GC_tot_2D matches the benchmark ✅
cov_WL_cng_2D matches the benchmark ✅
cov_WL_g_2D matches the benchmark ✅
cov_WL_ssc_2D matches the benchmark ✅
cov_WL_tot_2D matches the benchmark ✅
cov_XC_cng_2D matches the benchmark ✅
cov_XC_g_2D matches the benchmark ✅
cov_XC_ssc_2D matches the benchmark ✅
cov_XC_tot_2D matches the benchmark ✅
d2CGG_dVddeltab matches the benchmark ✅
d2CGL_dVddeltab matches the benchmark ✅
d2CLL_dVddeltab matches the benchmark ✅
dPgg_ddeltab matches the benchmark ✅
dPgm_ddeltab matches the benchmark ✅
dPmm_ddeltab matches the benchmark ✅
delta_l_3x2pt matches the benchmark ✅
delta_l_GC matches the benchmark ✅
delta_l_WL matches the benchmark ✅
delta_l_XC matches the benchmark ✅
do_sample_cov matches the benchmark ✅
ell_edges_3x2pt matches the benchmark ✅
ell_edges_GC matches the benchmark ✅
ell_edges_WL matches the benchmark ✅
ell_edges_XC matches the benchmark ✅
ell_max_3x2pt matches the benchmark ✅
ell_max_3x2pt_unb matches the benchmark ✅
ell_max_GC matches the benchmark ✅
ell_max_WL matches the benchmark ✅sys:1: UserWarning: the number of steps in the redshift grid is small, you may want to consider increasing it
   _____                       __                        
  / ___/____  ____ _________  / /_  ____  _________  ___ 
  \__ \/ __ \/ __ `/ ___/ _ \/ __ \/ __ \/ ___/ __ \/ _ \
 ___/ / /_/ / /_/ / /__/  __/ /_/ / /_/ / /  / / / /  __/
/____/ .___/\__,_/\___/\___/_.___/\____/_/  /_/ /_/\___/ 
    /_/                                                  

Generating a polar cap mask with area 13245 deg^2 and nside 1024
Angular radius of the cap: 69.0309 deg
fsky = 0.3211
Computing Cls...
done in 2.80 s
Computing cov workspace coupling coefficients...
...done in 15.66 s
Computing decoupled partial-sky Gaussian covariance with NaMaster...
  0%|          | 0/81 [00:00<?, ?it/s]  1%|          | 1/81 [00:04<06:06,  4.58s/it]  2%|▏         | 2/81 [00:09<06:04,  4.61s/it]  4%|▎         | 3/81 [00:13<06:00,  4.62s/it]  5%|▍         | 4/81 [00:18<05:56,  4.63s/it]  6%|▌         | 5/81 [00:23<05:52,  4.63s/it]  7%|▋         | 6/81 [00:27<05:48,  4.65s/it]  9%|▊         | 7/81 [00:32<05:43,  4.64s/it] 10%|▉         | 8/81 [00:37<05:38,  4.64s/it] 11%|█         | 9/81 [00:41<05:34,  4.64s/it] 12%|█▏        | 10/81 [00:46<05:27,  4.62s/it] 14%|█▎        | 11/81 [00:50<05:21,  4.59s/it] 15%|█▍        | 12/81 [00:55<05:17,  4.60s/it] 16%|█▌        | 13/81 [00:59<05:11,  4.59s/it] 17%|█▋        | 14/81 [01:04<05:07,  4.59s/it] 19%|█▊        | 15/81 [01:09<05:03,  4.60s/it] 20%|█▉        | 16/81 [01:13<04:59,  4.61s/it] 21%|██        | 17/81 [01:18<04:54,  4.61s/it] 22%|██▏       | 18/81 [01:23<04:49,  4.60s/it] 23%|██▎       | 19/81 [01:27<04:43,  4.57s/it] 25%|██▍       | 20/81 [01:32<04:37,  4.56s/it] 26%|██▌       | 21/81 [01:36<04:32,  4.55s/it] 27%|██▋       | 22/81 [01:41<04:28,  4.55s/it] 28%|██▊       | 23/81 [01:45<04:23,  4.54s/it] 30%|██▉       | 24/81 [01:50<04:18,  4.54s/it] 31%|███       | 25/81 [01:54<04:14,  4.55s/it] 32%|███▏      | 26/81 [01:59<04:11,  4.57s/it] 33%|███▎      | 27/81 [02:04<04:07,  4.59s/it] 35%|███▍      | 28/81 [02:08<04:03,  4.59s/it] 36%|███▌      | 29/81 [02:13<03:57,  4.57s/it] 37%|███▋      | 30/81 [02:17<03:53,  4.58s/it] 38%|███▊      | 31/81 [02:22<03:48,  4.56s/it] 40%|███▉      | 32/81 [02:26<03:43,  4.56s/it] 41%|████      | 33/81 [02:31<03:38,  4.56s/it] 42%|████▏     | 34/81 [02:35<03:33,  4.55s/it] 43%|████▎     | 35/81 [02:40<03:29,  4.55s/it] 44%|████▍     | 36/81 [02:45<03:25,  4.57s/it] 46%|████▌     | 37/81 [02:49<03:22,  4.59s/it] 47%|████▋     | 38/81 [02:54<03:18,  4.61s/it] 48%|████▊     | 39/81 [02:59<03:14,  4.63s/it] 49%|████▉     | 40/81 [03:03<03:10,  4.64s/it] 51%|█████     | 41/81 [03:08<03:05,  4.63s/it] 52%|█████▏    | 42/81 [03:12<02:59,  4.61s/it] 53%|█████▎    | 43/81 [03:17<02:54,  4.60s/it] 54%|█████▍    | 44/81 [03:21<02:49,  4.58s/it] 56%|█████▌    | 45/81 [03:26<02:44,  4.58s/it] 57%|█████▋    | 46/81 [03:31<02:39,  4.57s/it] 58%|█████▊    | 47/81 [03:35<02:35,  4.56s/it] 59%|█████▉    | 48/81 [03:40<02:30,  4.56s/it] 60%|██████    | 49/81 [03:44<02:25,  4.56s/it] 62%|██████▏   | 50/81 [03:49<02:21,  4.56s/it] 63%|██████▎   | 51/81 [03:53<02:16,  4.56s/it] 64%|██████▍   | 52/81 [03:58<02:12,  4.56s/it] 65%|██████▌   | 53/81 [04:03<02:07,  4.57s/it] 67%|██████▋   | 54/81 [04:07<02:03,  4.58s/it] 68%|██████▊   | 55/81 [04:12<01:59,  4.60s/it] 69%|██████▉   | 56/81 [04:16<01:54,  4.59s/it] 70%|███████   | 57/81 [04:21<01:50,  4.59s/it] 72%|███████▏  | 58/81 [04:26<01:45,  4.60s/it] 73%|███████▎  | 59/81 [04:30<01:41,  4.63s/it] 74%|███████▍  | 60/81 [04:35<01:37,  4.65s/it] 75%|███████▌  | 61/81 [04:40<01:33,  4.65s/it] 77%|███████▋  | 62/81 [04:44<01:28,  4.66s/it] 78%|███████▊  | 63/81 [04:49<01:23,  4.65s/it] 79%|███████▉  | 64/81 [04:54<01:19,  4.65s/it] 80%|████████  | 65/81 [04:58<01:14,  4.65s/it] 81%|████████▏ | 66/81 [05:03<01:09,  4.63s/it] 83%|████████▎ | 67/81 [05:07<01:04,  4.64s/it] 84%|████████▍ | 68/81 [05:12<01:00,  4.63s/it] 85%|████████▌ | 69/81 [05:17<00:55,  4.64s/it] 86%|████████▋ | 70/81 [05:21<00:51,  4.65s/it] 88%|████████▊ | 71/81 [05:26<00:46,  4.64s/it] 89%|████████▉ | 72/81 [05:31<00:41,  4.66s/it] 90%|█████████ | 73/81 [05:35<00:37,  4.66s/it] 91%|█████████▏| 74/81 [05:40<00:32,  4.65s/it] 93%|█████████▎| 75/81 [05:45<00:27,  4.65s/it] 94%|█████████▍| 76/81 [05:49<00:23,  4.64s/it] 95%|█████████▌| 77/81 [05:54<00:18,  4.64s/it] 96%|█████████▋| 78/81 [05:59<00:13,  4.63s/it] 98%|█████████▊| 79/81 [06:03<00:09,  4.63s/it] 99%|█████████▉| 80/81 [06:08<00:04,  4.63s/it]100%|██████████| 81/81 [06:12<00:00,  4.63s/it]100%|██████████| 81/81 [06:12<00:00,  4.60s/it]
/u/dsciotti/code/Spaceborne/main.py:1484: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
  fig, ax = plt.subplots(1, 2, figsize=(10, 6))
...done in 6.22 m
Gauss. cov. matrices computed in 415.96 s
SSC not requested, setting it to zero
cNG term not requested, setting it to zero
Covariance matrices computed
Covariance matrices saved in /u/dsciotti/code/Spaceborne_bench/tmp

Testing cov_3x2pt_tot_2D...

Condition number = 2.5169e+10
Cholesky decomposition successful
Numpy inversion successful.
Inverse test successfully (M @ M^{-1} is identity). atol=1e-9, rtol=1e-7
Matrix is symmetric. atol=0, rtol=1e-7
Finished in 7.08 minutes
sys:1: UserWarning: the number of steps in the redshift grid is small, you may want to consider increasing it
   _____                       __                        
  / ___/____  ____ _________  / /_  ____  _________  ___ 
  \__ \/ __ \/ __ `/ ___/ _ \/ __ \/ __ \/ ___/ __ \/ _ \
 ___/ / /_/ / /_/ / /__/  __/ /_/ / /_/ / /  / / / /  __/
/____/ .___/\__,_/\___/\___/_.___/\____/_/  /_/ /_/\___/ 
    /_/                                                  

Generating a polar cap mask with area 13245 deg^2 and nside 1024
Angular radius of the cap: 69.0309 deg
fsky = 0.3211
Computing Cls...
done in 3.00 s
Gauss. cov. matrices computed in 0.02 s
Computing halo model probe responses...
0it [00:00, ?it/s]10it [00:00, 125.24it/s]
Package 'NPZ' is loaded.
Package 'LoopVectorization' is loaded.
Package 'YAML' is loaded.

*** Computing SSC ****
specs:
nbl: 15
zbins: 3
z_steps: 100
probe_combinations: ["LLLL", "LLGL", "LLGG", "GLGL", "GLGG", "GGGG"]
integration_type: simps
*****************

Computing SSC covariance block LL_LL
  4.762018 seconds (7.25 M allocations: 364.774 MiB, 1.17% gc time, 103.56% compilation time)
Computing SSC covariance block LL_GL
  0.005228 seconds (12 allocations: 191.234 KiB)
Computing SSC covariance block LL_GG
  0.002205 seconds (12 allocations: 127.984 KiB)
Computing SSC covariance block GL_GL
  0.004315 seconds (12 allocations: 286.234 KiB)
Computing SSC covariance block GL_GG
  0.002290 seconds (12 allocations: 191.234 KiB)
Computing SSC covariance block GG_GG
  0.002259 seconds (12 allocations: 127.984 KiB)
/u/dsciotti/code/Spaceborne/main.py:1484: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
  fig, ax = plt.subplots(1, 2, figsize=(10, 6))
Computing sigma^2_b(z_1, z_2)...
done in 0.58 s
SSC computed in 0.17 m
Including SSC in total covariance
cNG term not requested, setting it to zero
Covariance matrices computed
Covariance matrices saved in /u/dsciotti/code/Spaceborne_bench/tmp

Testing cov_3x2pt_tot_2D...

Condition number = 5.2572e+13
Cholesky decomposition successful
Numpy inversion successful.
Inverse test successfully (M @ M^{-1} is identity). atol=1e-9, rtol=1e-7
Matrix is symmetric. atol=0, rtol=1e-7
Finished in 0.32 minutes

ell_max_XC matches the benchmark ✅
ell_max_ref matches the benchmark ✅
ell_min_3x2pt matches the benchmark ✅
ell_min_GC matches the benchmark ✅
ell_min_WL matches the benchmark ✅
ell_min_XC matches the benchmark ✅
ell_min_ref matches the benchmark ✅
ells_3x2pt matches the benchmark ✅
ells_3x2pt_unb matches the benchmark ✅
ells_GC matches the benchmark ✅
ells_WL matches the benchmark ✅
ells_XC matches the benchmark ✅
gal_bias_2d matches the benchmark ✅
ind matches the benchmark ✅
k_grid matches the benchmark ✅
k_grid_sigma2_b matches the benchmark ✅
mag_bias_2d matches the benchmark ✅
nbl_3x2pt matches the benchmark ✅
nbl_3x2pt_unb matches the benchmark ✅
nbl_GC matches the benchmark ✅
nbl_WL matches the benchmark ✅
nbl_XC matches the benchmark ✅
nbl_ref matches the benchmark ✅
nmt_bin_obj_GC matches the benchmark ✅
nmt_bin_obj_WL matches the benchmark ✅
nz_lns matches the benchmark ✅
nz_src matches the benchmark ✅
sigma2_b matches the benchmark ✅
use_namaster matches the benchmark ✅
wf_delta matches the benchmark ✅
wf_gamma matches the benchmark ✅
wf_ia matches the benchmark ✅
wf_lensing_arr matches the benchmark ✅
wf_mu matches the benchmark ✅
z_grid matches the benchmark ✅
z_grid_trisp matches the benchmark ✅
cov WL tot = G + SSC + cNG ✅
cov WL tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅


🧪🧪🧪 Testing config_0010 🧪🧪🧪...

Keys not in common: {'wl_bins_filename', 'gc_bins_filename'}


Comparison failed for binning_type: The DType <class 'numpy._FloatAbstractDType'> could not be promoted by <class 'numpy.dtypes.StrDType'>. This means that no common DType exists for the given inputs. For example they cannot be stored in a single array unless the dtype is `object`. The full list of DTypes is: (<class 'numpy.dtypes.StrDType'>, <class 'numpy._FloatAbstractDType'>)
bnt_matrix matches the benchmark ✅
cl_3x2pt_5d matches the benchmark ✅
cl_gg_3d matches the benchmark ✅
cl_gl_3d matches the benchmark ✅
cl_ll_3d matches the benchmark ✅
cov_3x2pt_cng_2D matches the benchmark ✅
cov_3x2pt_g_2D matches the benchmark ✅
cov_3x2pt_ssc_2D matches the benchmark ✅
cov_3x2pt_tot_2D matches the benchmark ✅
cov_GC_cng_2D matches the benchmark ✅
cov_GC_g_2D matches the benchmark ✅
cov_GC_ssc_2D matches the benchmark ✅
cov_GC_tot_2D matches the benchmark ✅
cov_WL_cng_2D matches the benchmark ✅
cov_WL_g_2D matches the benchmark ✅
cov_WL_ssc_2D matches the benchmark ✅
cov_WL_tot_2D matches the benchmark ✅
cov_XC_cng_2D matches the benchmark ✅
cov_XC_g_2D matches the benchmark ✅
cov_XC_ssc_2D matches the benchmark ✅
cov_XC_tot_2D matches the benchmark ✅
d2CGG_dVddeltab matches the benchmark ✅
d2CGL_dVddeltab matches the benchmark ✅
d2CLL_dVddeltab matches the benchmark ✅
dPgg_ddeltab matches the benchmark ✅
dPgm_ddeltab matches the benchmark ✅
dPmm_ddeltab matches the benchmark ✅
delta_l_3x2pt matches the benchmark ✅
delta_l_GC matches the benchmark ✅
delta_l_WL matches the benchmark ✅
delta_l_XC matches the benchmark ✅
do_sample_cov matches the benchmark ✅
ell_edges_3x2pt matches the benchmark ✅
ell_edges_GC matches the benchmark ✅
ell_edges_WL matches the benchmark ✅
ell_edges_XC matches the benchmark ✅
ell_max_3x2pt matches the benchmark ✅
ell_max_3x2pt_unb matches the benchmark ✅
ell_max_GC matches the benchmark ✅
ell_max_WL matches the benchmark ✅
ell_max_XC matches the benchmark ✅
ell_max_ref matches the benchmark ✅
ell_min_3x2pt matches the benchmark ✅
ell_min_GC matches the benchmark ✅
ell_min_WL matches the benchmark ✅
ell_min_XC matches the benchmark ✅
ell_min_ref matches the benchmark ✅
ells_3x2pt matches the benchmark ✅
ells_3x2pt_unb matches the benchmark ✅
ells_GC matches the benchmark ✅
ells_WL matches the benchmark ✅
ells_XC matches the benchmark ✅
gal_bias_2d matches the benchmark ✅
ind matches the benchmark ✅
k_grid matches the benchmark ✅
k_grid_sigma2_b matches the benchmark ✅
mag_bias_2d matches the benchmark ✅
nbl_3x2pt matches the benchmark ✅
nbl_3x2pt_unb matches the benchmark ✅
nbl_GC matches the benchmark ✅
nbl_WL matches the benchmark ✅
nbl_XC matches the benchmark ✅
nbl_ref matches the benchmark ✅
nmt_bin_obj_GC matches the benchmark ✅
nmt_bin_obj_WL matches the benchmark ✅
nz_lns matches the benchmark ✅
nz_src matches the benchmark ✅
sigma2_b matches the benchmark ✅
use_namaster matches the benchmark ✅
wf_delta matches the benchmark ✅
wf_gamma matches the benchmark ✅
wf_ia matches the benchmark ✅
wf_lensing_arr matches the benchmark ✅
wf_mu matches the benchmark ✅
z_grid matches the benchmark ✅
z_grid_trisp matches the benchmark ✅
cov WL tot = G + SSC + cNG ✅
cov WL tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅


🧪🧪🧪 Testing config_0011 🧪🧪🧪...

Keys not in common: {'wl_bins_filename', 'gc_bins_filename'}


Comparison failed for binning_type: The DType <class 'numpy._FloatAbstractDType'> could not be promoted by <class 'numpy.dtypes.StrDType'>. This means that no common DType exists for the given inputs. For example they cannot be stored in a single array unless the dtype is `object`. The full list of DTypes is: (<class 'numpy.dtypes.StrDType'>, <class 'numpy._FloatAbstractDType'>)
bnt_matrix matches the benchmark ✅
cl_3x2pt_5d matches the benchmark ✅
cl_gg_3d matches the benchmark ✅
cl_gl_3d matches the benchmark ✅
cl_ll_3d matches the benchmark ✅
cov_3x2pt_cng_2D matches the benchmark ✅
cov_3x2pt_g_2D matches the benchmark ✅
cov_3x2pt_ssc_2D matches the benchmark ✅
cov_3x2pt_tot_2D matches the benchmark ✅
cov_GC_cng_2D matches the benchmark ✅
cov_GC_g_2D matches the benchmark ✅
cov_GC_ssc_2D matches the benchmark ✅
cov_GC_tot_2D matches the benchmark ✅
cov_WL_cng_2D matches the benchmark ✅
cov_WL_g_2D matches the benchmark ✅
cov_WL_ssc_2D matches the benchmark ✅
cov_WL_tot_2D matches the benchmark ✅
cov_XC_cng_2D matches the benchmark ✅
cov_XC_g_2D matches the benchmark ✅
cov_XC_ssc_2D matches the benchmark ✅
cov_XC_tot_2D matches the benchmark ✅
d2CGG_dVddeltab matches the benchmark ✅
d2CGL_dVddeltab matches the benchmark ✅
d2CLL_dVddeltab matches the benchmark ✅
dPgg_ddeltab matches the benchmark ✅
dPgm_ddeltab matches the benchmark ✅
dPmm_ddeltab matches the benchmark ✅
delta_l_3x2pt matches the benchmark ✅
delta_l_GC matches the benchmark ✅
delta_l_WL matches the benchmark ✅
delta_l_XC matches the benchmark ✅
delta_l_ref matches the benchmark ✅
do_sample_cov matches the benchmark ✅
ell_edges_3x2pt matches the benchmark ✅
ell_edges_GC matches the benchmark ✅
ell_edges_WL matches the benchmark ✅
ell_edges_XC matches the benchmark ✅
ell_edges_ref matches the benchmark ✅
ell_max_3x2pt matches the benchmark ✅
ell_max_3x2pt_unb matches the benchmark ✅
ell_max_GC matches the benchmark ✅
ell_max_WL matches the benchmark ✅
ell_max_XC matches the benchmark ✅
ell_max_ref matches the benchmark ✅
ell_min_3x2pt matches the benchmark ✅
ell_min_GC matches the benchmark ✅
ell_min_WL matches the benchmark ✅
ell_min_XC matches the benchmark ✅
ell_min_ref matches the benchmark ✅
ells_3x2pt matches the benchmark ✅
ells_3x2pt_unb matches the benchmark ✅
ells_GC matches the benchmark ✅
ells_WL matches the benchmark ✅
ells_XC matches the benchmark ✅
ells_ref matches the benchmark ✅
gal_bias_2d matches the benchmark ✅
ind matches the benchmark ✅
k_grid matches the benchmark ✅
k_grid_sigma2_b matches the benchmark ✅
mag_bias_2d matches the benchmark ✅
nbl_3x2pt matches the benchmark ✅
nbl_3x2pt_unb matches the benchmark ✅
nbl_GC matches the benchmark ✅
nbl_WL matches the benchmark ✅
nbl_XC matches the benchmark ✅
nbl_ref matches the benchmark ✅
nz_lns matches the benchmark ✅
nz_src matches the benchmark ✅
sigma2_b matches the benchmark ✅
use_namaster matches the benchmark ✅sys:1: UserWarning: the number of steps in the redshift grid is small, you may want to consider increasing it
   _____                       __                        
  / ___/____  ____ _________  / /_  ____  _________  ___ 
  \__ \/ __ \/ __ `/ ___/ _ \/ __ \/ __ \/ ___/ __ \/ _ \
 ___/ / /_/ / /_/ / /__/  __/ /_/ / /_/ / /  / / / /  __/
/____/ .___/\__,_/\___/\___/_.___/\____/_/  /_/ /_/\___/ 
    /_/                                                  

Generating a polar cap mask with area 13245 deg^2 and nside 1024
Angular radius of the cap: 69.0309 deg
fsky = 0.3211
Computing Cls...
done in 2.66 s
Gauss. cov. matrices computed in 0.02 s
Computing halo model probe responses...
0it [00:00, ?it/s]10it [00:00, 124.86it/s]
Package 'NPZ' is loaded.
Package 'LoopVectorization' is loaded.
Package 'YAML' is loaded.

*** Computing SSC ****
specs:
nbl: 15
zbins: 3
z_steps: 100
probe_combinations: ["LLLL", "LLGL", "LLGG", "GLGL", "GLGG", "GGGG"]
integration_type: simps
*****************

Computing SSC covariance block LL_LL
  4.661314 seconds (7.25 M allocations: 364.774 MiB, 1.04% gc time, 103.60% compilation time)
Computing SSC covariance block LL_GL
  0.002521 seconds (12 allocations: 191.234 KiB)
Computing SSC covariance block LL_GG
  0.002637 seconds (12 allocations: 127.984 KiB)
Computing SSC covariance block GL_GL
  0.004985 seconds (12 allocations: 286.234 KiB)
Computing SSC covariance block GL_GG
  0.002375 seconds (12 allocations: 191.234 KiB)
Computing SSC covariance block GG_GG
  0.002364 seconds (12 allocations: 127.984 KiB)
/u/dsciotti/code/Spaceborne/main.py:1484: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
  fig, ax = plt.subplots(1, 2, figsize=(10, 6))
Computing sigma^2_b(z_1, z_2)...
done in 0.55 s
SSC computed in 0.16 m
Including SSC in total covariance
cNG term not requested, setting it to zero
Covariance matrices computed
Covariance matrices saved in /u/dsciotti/code/Spaceborne_bench/tmp

Testing cov_3x2pt_tot_2D...

Condition number = 5.2572e+13
Cholesky decomposition successful
Numpy inversion successful.
Inverse test successfully (M @ M^{-1} is identity). atol=1e-9, rtol=1e-7
Matrix is symmetric. atol=0, rtol=1e-7
Finished in 0.30 minutes
sys:1: UserWarning: the number of steps in the redshift grid is small, you may want to consider increasing it
   _____                       __                        
  / ___/____  ____ _________  / /_  ____  _________  ___ 
  \__ \/ __ \/ __ `/ ___/ _ \/ __ \/ __ \/ ___/ __ \/ _ \
 ___/ / /_/ / /_/ / /__/  __/ /_/ / /_/ / /  / / / /  __/
/____/ .___/\__,_/\___/\___/_.___/\____/_/  /_/ /_/\___/ 
    /_/                                                  

Generating a polar cap mask with area 13245 deg^2 and nside 1024
Angular radius of the cap: 69.0309 deg
fsky = 0.3211
Computing Cls...
done in 2.74 s
Gauss. cov. matrices computed in 0.02 s
cNG trispectrum: z points = 10, k points = 20
Computing cNG trispectrum, probe combination LLLL
done in 0.10 m
Computing cNG trispectrum, probe combination LLGL
done in 0.10 m
Computing cNG trispectrum, probe combination LLGG
done in 0.10 m
Computing cNG trispectrum, probe combination GLGL
done in 0.10 m
Computing cNG trispectrum, probe combination GLGG
done in 0.10 m
Computing cNG trispectrum, probe combination GGGG
done in 0.09 m
CCL 3x2pt cov: computing probe combination  ('L', 'L', 'L', 'L')
  0%|          | 0/6 [00:00<?, ?it/s] 83%|████████▎ | 5/6 [00:00<00:00, 48.49it/s]100%|██████████| 6/6 [00:00<00:00, 52.77it/s]
cNG computed with pyccl in 0 min
CCL 3x2pt cov: computing probe combination  ('L', 'L', 'G', 'L')
  0%|          | 0/6 [00:00<?, ?it/s] 67%|██████▋   | 4/6 [00:00<00:00, 30.25it/s]100%|██████████| 6/6 [00:00<00:00, 23.60it/s]
cNG computed with pyccl in 0 min
CCL 3x2pt cov: computing probe combination  ('L', 'L', 'G', 'G')
  0%|          | 0/6 [00:00<?, ?it/s] 83%|████████▎ | 5/6 [00:00<00:00, 47.66it/s]100%|██████████| 6/6 [00:00<00:00, 44.84it/s]
cNG computed with pyccl in 0 min
CCL 3x2pt cov: computing probe combination  ('G', 'L', 'G', 'L')
  0%|          | 0/9 [00:00<?, ?it/s] 44%|████▍     | 4/9 [00:00<00:00, 35.50it/s]100%|██████████| 9/9 [00:00<00:00, 55.17it/s]
cNG computed with pyccl in 0 min
CCL 3x2pt cov: computing probe combination  ('G', 'L', 'G', 'G')
  0%|          | 0/9 [00:00<?, ?it/s] 56%|█████▌    | 5/9 [00:00<00:00, 46.36it/s]100%|██████████| 9/9 [00:00<00:00, 53.14it/s]
cNG computed with pyccl in 0 min
CCL 3x2pt cov: computing probe combination  ('G', 'G', 'G', 'G')
  0%|          | 0/6 [00:00<?, ?it/s]100%|██████████| 6/6 [00:00<00:00, 83.46it/s]
/u/dsciotti/code/Spaceborne/main.py:1484: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
  fig, ax = plt.subplots(1, 2, figsize=(10, 6))
cNG computed with pyccl in 0 min
CCL 3x2pt cov: filling probe combination ('G', 'G', 'L', 'L') by symmetry
CCL 3x2pt cov: filling probe combination ('G', 'G', 'G', 'L') by symmetry
CCL 3x2pt cov: filling probe combination ('G', 'L', 'L', 'L') by symmetry
Probe combination: ('G', 'L', 'G', 'L')

Not equal to tolerance rtol=0.1, atol=0
cov_ng_2D ('G', 'L', 'G', 'L') is not symmetric in ell1, ell2
Mismatched elements: 2 / 18225 (0.011%)
Max absolute difference: 1.90175798e-23
Max relative difference: 0.22897114
 x: array([[1.498294e-18, 2.636744e-18, 3.131050e-18, ..., 2.034272e-29,
        1.243368e-27, 3.038896e-27],
       [2.636744e-18, 4.773408e-18, 5.711007e-18, ..., 1.243368e-27,...
 y: array([[1.498294e-18, 2.636744e-18, 3.131050e-18, ..., 2.034272e-29,
        1.243368e-27, 3.038896e-27],
       [2.636744e-18, 4.773408e-18, 5.711007e-18, ..., 1.243368e-27,...
SSC not requested, setting it to zero
Including cNG in total covariance
Covariance matrices computed
Covariance matrices saved in /u/dsciotti/code/Spaceborne_bench/tmp

Testing cov_3x2pt_tot_2D...

Condition number = 5.2733e+13
Cholesky decomposition failed. Consider checking the condition number or symmetry.
Numpy inversion successful.
Inverse test successfully (M @ M^{-1} is identity). atol=1e-9, rtol=1e-7
Warning: Matrix is not symmetric. atol=0, rtol=1e-7
Finished in 0.72 minutes

wf_delta matches the benchmark ✅
wf_gamma matches the benchmark ✅
wf_ia matches the benchmark ✅
wf_lensing_arr matches the benchmark ✅
wf_mu matches the benchmark ✅
z_grid matches the benchmark ✅
z_grid_trisp matches the benchmark ✅
cov WL tot = G + SSC + cNG ✅
cov WL tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅


🧪🧪🧪 Testing config_0012 🧪🧪🧪...

Keys not in common: {'wl_bins_filename', 'gc_bins_filename'}


Comparison failed for binning_type: The DType <class 'numpy._FloatAbstractDType'> could not be promoted by <class 'numpy.dtypes.StrDType'>. This means that no common DType exists for the given inputs. For example they cannot be stored in a single array unless the dtype is `object`. The full list of DTypes is: (<class 'numpy.dtypes.StrDType'>, <class 'numpy._FloatAbstractDType'>)
bnt_matrix matches the benchmark ✅
cl_3x2pt_5d matches the benchmark ✅
cl_gg_3d matches the benchmark ✅
cl_gl_3d matches the benchmark ✅
cl_ll_3d matches the benchmark ✅
cov_3x2pt_cng_2D matches the benchmark ✅
cov_3x2pt_g_2D matches the benchmark ✅
cov_3x2pt_ssc_2D matches the benchmark ✅
cov_3x2pt_tot_2D matches the benchmark ✅
cov_GC_cng_2D matches the benchmark ✅
cov_GC_g_2D matches the benchmark ✅
cov_GC_ssc_2D matches the benchmark ✅
cov_GC_tot_2D matches the benchmark ✅
cov_WL_cng_2D matches the benchmark ✅
cov_WL_g_2D matches the benchmark ✅
cov_WL_ssc_2D matches the benchmark ✅
cov_WL_tot_2D matches the benchmark ✅
cov_XC_cng_2D matches the benchmark ✅
cov_XC_g_2D matches the benchmark ✅
cov_XC_ssc_2D matches the benchmark ✅
cov_XC_tot_2D matches the benchmark ✅
d2CGG_dVddeltab matches the benchmark ✅
d2CGL_dVddeltab matches the benchmark ✅
d2CLL_dVddeltab matches the benchmark ✅
dPgg_ddeltab matches the benchmark ✅
dPgm_ddeltab matches the benchmark ✅
dPmm_ddeltab matches the benchmark ✅
delta_l_3x2pt matches the benchmark ✅
delta_l_GC matches the benchmark ✅
delta_l_WL matches the benchmark ✅
delta_l_XC matches the benchmark ✅
delta_l_ref matches the benchmark ✅
do_sample_cov matches the benchmark ✅
ell_edges_3x2pt matches the benchmark ✅
ell_edges_GC matches the benchmark ✅
ell_edges_WL matches the benchmark ✅
ell_edges_XC matches the benchmark ✅
ell_edges_ref matches the benchmark ✅
ell_max_3x2pt matches the benchmark ✅
ell_max_3x2pt_unb matches the benchmark ✅
ell_max_GC matches the benchmark ✅
ell_max_WL matches the benchmark ✅
ell_max_XC matches the benchmark ✅
ell_max_ref matches the benchmark ✅
ell_min_3x2pt matches the benchmark ✅
ell_min_GC matches the benchmark ✅
ell_min_WL matches the benchmark ✅
ell_min_XC matches the benchmark ✅
ell_min_ref matches the benchmark ✅
ells_3x2pt matches the benchmark ✅
ells_3x2pt_unb matches the benchmark ✅
ells_GC matches the benchmark ✅
ells_WL matches the benchmark ✅
ells_XC matches the benchmark ✅
ells_ref matches the benchmark ✅
gal_bias_2d matches the benchmark ✅
ind matches the benchmark ✅
k_grid matches the benchmark ✅
k_grid_sigma2_b matches the benchmark ✅
mag_bias_2d matches the benchmark ✅
nbl_3x2pt matches the benchmark ✅
nbl_3x2pt_unb matches the benchmark ✅
nbl_GC matches the benchmark ✅
nbl_WL matches the benchmark ✅
nbl_XC matches the benchmark ✅
nbl_ref matches the benchmark ✅
nz_lns matches the benchmark ✅
nz_src matches the benchmark ✅
sigma2_b matches the benchmark ✅
use_namaster matches the benchmark ✅
wf_delta matches the benchmark ✅
wf_gamma matches the benchmark ✅
wf_ia matches the benchmark ✅
wf_lensing_arr matches the benchmark ✅
wf_mu matches the benchmark ✅
z_grid matches the benchmark ✅
z_grid_trisp matches the benchmark ✅
cov WL tot = G + SSC + cNG ✅
cov WL tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅


🧪🧪🧪 Testing config_0013 🧪🧪🧪...

Keys not in common: {'wl_bins_filename', 'gc_bins_filename'}


Comparison failed for binning_type: The DType <class 'numpy._FloatAbstractDType'> could not be promoted by <class 'numpy.dtypes.StrDType'>. This means that no common DType exists for the given inputs. For example they cannot be stored in a single array unless the dtype is `object`. The full list of DTypes is: (<class 'numpy.dtypes.StrDType'>, <class 'numpy._FloatAbstractDType'>)
bnt_matrix matches the benchmark ✅
cl_3x2pt_5d matches the benchmark ✅
cl_gg_3d matches the benchmark ✅
cl_gl_3d matches the benchmark ✅
cl_ll_3d matches the benchmark ✅
Comparison failed for cov_3x2pt_cng_2D: 
Not equal to tolerance rtol=1e-05, atol=0
cov_3x2pt_cng_2D doesn't match the benchmark ❌
Mismatched elements: 4776 / 99225 (4.81%)
Max absolute difference: 1.51919423e-23
Max relative difference: 0.16017587
 x: array([[ 2.632408e-20,  3.018290e-20,  3.175579e-20, ...,  1.122961e-25,
         1.264176e-29,  1.629302e-32],
       [ 3.018290e-20,  3.510677e-20,  3.712080e-20, ...,  1.317272e-24,...
 y: array([[ 2.632408e-20,  3.018290e-20,  3.175579e-20, ...,  1.122961e-25,
         1.264176e-29,  1.629302e-32],
       [ 3.018290e-20,  3.510677e-20,  3.712080e-20, ...,  1.317272e-24,...
cov_3x2pt_g_2D matches the benchmark ✅
cov_3x2pt_ssc_2D matches the benchmark ✅
Comparison failed for cov_3x2pt_tot_2D: 
Not equal to tolerance rtol=1e-05, atol=0
cov_3x2pt_tot_2D doesn't match the benchmark ❌
Mismatched elements: 4776 / 99225 (4.81%)
Max absolute difference: 1.51919423e-23
Max relative difference: 0.16017587
 x: array([[ 9.376902e-18,  1.287571e-17,  1.470321e-17, ...,  1.122961e-25,
         1.264176e-29,  1.629302e-32],
       [ 1.287571e-17,  2.012171e-17,  2.382799e-17, ...,  1.317272e-24,...
 y: array([[ 9.376902e-18,  1.287571e-17,  1.470321e-17, ...,  1.122961e-25,
         1.264176e-29,  1.629302e-32],
       [ 1.287571e-17,  2.012171e-17,  2.382799e-17, ...,  1.317272e-24,...
cov_GC_cng_2D matches the benchmark ✅
cov_GC_g_2D matches the benchmark ✅
cov_GC_ssc_2D matches the benchmark ✅
cov_GC_tot_2D matches the benchmark ✅
cov_WL_cng_2D matches the benchmark ✅
cov_WL_g_2D matches the benchmark ✅
cov_WL_ssc_2D matches the benchmark ✅
cov_WL_tot_2D matches the benchmark ✅
Comparison failed for cov_XC_cng_2D: 
Not equal to tolerance rtol=1e-05, atol=0
cov_XC_cng_2D doesn't match the benchmark ❌
Mismatched elements: 4776 / 18225 (26.2%)
Max absolute difference: 1.51919423e-23
Max relative difference: 0.16017587
 x: array([[1.498294e-18, 2.636744e-18, 3.131050e-18, ..., 2.034272e-29,
        1.243368e-27, 3.038896e-27],
       [2.636744e-18, 4.773408e-18, 5.711007e-18, ..., 1.243368e-27,...
 y: array([[1.498294e-18, 2.636744e-18, 3.131050e-18, ..., 2.034272e-29,
        1.243368e-27, 3.038896e-27],
       [2.636744e-18, 4.773408e-18, 5.711007e-18, ..., 1.243368e-27,...
cov_XC_g_2D matches the benchmark ✅
cov_XC_ssc_2D matches the benchmark ✅
Comparison failed for cov_XC_tot_2D: 
Not equal to tolerance rtol=1e-05, atol=0
cov_XC_tot_2D doesn't match the benchmark ❌
Mismatched elements: 4776 / 18225 (26.2%)
Max absolute difference: 1.51919423e-23
Max relative difference: 0.16017587
 x: array([[7.750354e-15, 1.226769e-14, 1.484268e-14, ..., 2.034272e-29,
        1.243368e-27, 3.038896e-27],
       [1.226769e-14, 2.431224e-14, 3.104576e-14, ..., 1.243368e-27,...
 y: array([[7.750354e-15, 1.226769e-14, 1.484268e-14, ..., 2.034272e-29,
        1.243368e-27, 3.038896e-27],
       [1.226769e-14, 2.431224e-14, 3.104576e-14, ..., 1.243368e-27,...
d2CGG_dVddeltab matches the benchmark ✅
d2CGL_dVddeltab matches the benchmark ✅
d2CLL_dVddeltab matches the benchmark ✅
dPgg_ddeltab matches the benchmark ✅
dPgm_ddeltab matches the benchmark ✅
dPmm_ddeltab matches the benchmark ✅
delta_l_3x2pt matches the benchmark ✅
delta_l_GC matches the benchmark ✅
delta_l_WL matches the benchmark ✅
delta_l_XC matches the benchmark ✅
delta_l_ref matches the benchmark ✅
do_sample_cov matches the benchmark ✅
ell_edges_3x2pt matches the benchmark ✅
ell_edges_GC matches the benchmark ✅sys:1: UserWarning: the number of steps in the redshift grid is small, you may want to consider increasing it
/u/dsciotti/code/Spaceborne/main.py:1484: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
  fig, ax = plt.subplots(1, 2, figsize=(10, 6))
   _____                       __                        
  / ___/____  ____ _________  / /_  ____  _________  ___ 
  \__ \/ __ \/ __ `/ ___/ _ \/ __ \/ __ \/ ___/ __ \/ _ \
 ___/ / /_/ / /_/ / /__/  __/ /_/ / /_/ / /  / / / /  __/
/____/ .___/\__,_/\___/\___/_.___/\____/_/  /_/ /_/\___/ 
    /_/                                                  

Generating a polar cap mask with area 13245 deg^2 and nside 1024
Angular radius of the cap: 69.0309 deg
fsky = 0.3211
Computing Cls...
done in 3.07 s
Gauss. cov. matrices computed in 0.02 s
SSC not requested, setting it to zero
cNG term not requested, setting it to zero
Covariance matrices computed
Covariance matrices saved in /u/dsciotti/code/Spaceborne_bench/tmp

Testing cov_3x2pt_tot_2D...

Condition number = 5.2730e+13
Cholesky decomposition successful
Numpy inversion successful.
Inverse test successfully (M @ M^{-1} is identity). atol=1e-9, rtol=1e-7
Matrix is symmetric. atol=0, rtol=1e-7
Finished in 0.12 minutes
sys:1: UserWarning: the number of steps in the redshift grid is small, you may want to consider increasing it
/u/dsciotti/code/Spaceborne/main.py:1484: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
  fig, ax = plt.subplots(1, 2, figsize=(10, 6))
   _____                       __                        
  / ___/____  ____ _________  / /_  ____  _________  ___ 
  \__ \/ __ \/ __ `/ ___/ _ \/ __ \/ __ \/ ___/ __ \/ _ \
 ___/ / /_/ / /_/ / /__/  __/ /_/ / /_/ / /  / / / /  __/
/____/ .___/\__,_/\___/\___/_.___/\____/_/  /_/ /_/\___/ 
    /_/                                                  

Generating a polar cap mask with area 13245 deg^2 and nside 1024
Angular radius of the cap: 69.0309 deg
fsky = 0.3211
Computing Cls...
done in 3.10 s
Gauss. cov. matrices computed in 0.02 s
SSC not requested, setting it to zero
cNG term not requested, setting it to zero
Covariance matrices computed
Covariance matrices saved in /u/dsciotti/code/Spaceborne_bench/tmp

Testing cov_3x2pt_tot_2D...

Condition number = 5.2730e+13
Cholesky decomposition successful
Numpy inversion successful.
Inverse test successfully (M @ M^{-1} is identity). atol=1e-9, rtol=1e-7
Matrix is symmetric. atol=0, rtol=1e-7
Finished in 0.16 minutes

ell_edges_WL matches the benchmark ✅
ell_edges_XC matches the benchmark ✅
ell_edges_ref matches the benchmark ✅
ell_max_3x2pt matches the benchmark ✅
ell_max_3x2pt_unb matches the benchmark ✅
ell_max_GC matches the benchmark ✅
ell_max_WL matches the benchmark ✅
ell_max_XC matches the benchmark ✅
ell_max_ref matches the benchmark ✅
ell_min_3x2pt matches the benchmark ✅
ell_min_GC matches the benchmark ✅
ell_min_WL matches the benchmark ✅
ell_min_XC matches the benchmark ✅
ell_min_ref matches the benchmark ✅
ells_3x2pt matches the benchmark ✅
ells_3x2pt_unb matches the benchmark ✅
ells_GC matches the benchmark ✅
ells_WL matches the benchmark ✅
ells_XC matches the benchmark ✅
ells_ref matches the benchmark ✅
gal_bias_2d matches the benchmark ✅
ind matches the benchmark ✅
k_grid matches the benchmark ✅
k_grid_sigma2_b matches the benchmark ✅
mag_bias_2d matches the benchmark ✅
nbl_3x2pt matches the benchmark ✅
nbl_3x2pt_unb matches the benchmark ✅
nbl_GC matches the benchmark ✅
nbl_WL matches the benchmark ✅
nbl_XC matches the benchmark ✅
nbl_ref matches the benchmark ✅
nz_lns matches the benchmark ✅
nz_src matches the benchmark ✅
sigma2_b matches the benchmark ✅
use_namaster matches the benchmark ✅
wf_delta matches the benchmark ✅
wf_gamma matches the benchmark ✅
wf_ia matches the benchmark ✅
wf_lensing_arr matches the benchmark ✅
wf_mu matches the benchmark ✅
z_grid matches the benchmark ✅
z_grid_trisp matches the benchmark ✅
cov WL tot = G + SSC + cNG ✅
cov WL tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅


🧪🧪🧪 Testing config_0014 🧪🧪🧪...

Keys not in common: {'wl_bins_filename', 'gc_bins_filename'}


Comparison failed for binning_type: The DType <class 'numpy._FloatAbstractDType'> could not be promoted by <class 'numpy.dtypes.StrDType'>. This means that no common DType exists for the given inputs. For example they cannot be stored in a single array unless the dtype is `object`. The full list of DTypes is: (<class 'numpy.dtypes.StrDType'>, <class 'numpy._FloatAbstractDType'>)
bnt_matrix matches the benchmark ✅
cl_3x2pt_5d matches the benchmark ✅
cl_gg_3d matches the benchmark ✅
cl_gl_3d matches the benchmark ✅
cl_ll_3d matches the benchmark ✅
cov_3x2pt_cng_2D matches the benchmark ✅
cov_3x2pt_g_2D matches the benchmark ✅
cov_3x2pt_ssc_2D matches the benchmark ✅
cov_3x2pt_tot_2D matches the benchmark ✅
cov_GC_cng_2D matches the benchmark ✅
cov_GC_g_2D matches the benchmark ✅
cov_GC_ssc_2D matches the benchmark ✅
cov_GC_tot_2D matches the benchmark ✅
cov_WL_cng_2D matches the benchmark ✅
cov_WL_g_2D matches the benchmark ✅
cov_WL_ssc_2D matches the benchmark ✅
cov_WL_tot_2D matches the benchmark ✅
cov_XC_cng_2D matches the benchmark ✅
cov_XC_g_2D matches the benchmark ✅
cov_XC_ssc_2D matches the benchmark ✅
cov_XC_tot_2D matches the benchmark ✅
d2CGG_dVddeltab matches the benchmark ✅
d2CGL_dVddeltab matches the benchmark ✅
d2CLL_dVddeltab matches the benchmark ✅
dPgg_ddeltab matches the benchmark ✅
dPgm_ddeltab matches the benchmark ✅
dPmm_ddeltab matches the benchmark ✅
delta_l_3x2pt matches the benchmark ✅
delta_l_GC matches the benchmark ✅
delta_l_WL matches the benchmark ✅
delta_l_XC matches the benchmark ✅
delta_l_ref matches the benchmark ✅
do_sample_cov matches the benchmark ✅
ell_edges_3x2pt matches the benchmark ✅
ell_edges_GC matches the benchmark ✅
ell_edges_WL matches the benchmark ✅
ell_edges_XC matches the benchmark ✅
ell_edges_ref matches the benchmark ✅
ell_max_3x2pt matches the benchmark ✅
ell_max_3x2pt_unb matches the benchmark ✅
ell_max_GC matches the benchmark ✅
ell_max_WL matches the benchmark ✅
ell_max_XC matches the benchmark ✅
ell_max_ref matches the benchmark ✅
ell_min_3x2pt matches the benchmark ✅
ell_min_GC matches the benchmark ✅
ell_min_WL matches the benchmark ✅
ell_min_XC matches the benchmark ✅
ell_min_ref matches the benchmark ✅
ells_3x2pt matches the benchmark ✅
ells_3x2pt_unb matches the benchmark ✅
ells_GC matches the benchmark ✅
ells_WL matches the benchmark ✅
ells_XC matches the benchmark ✅
ells_ref matches the benchmark ✅
gal_bias_2d matches the benchmark ✅
ind matches the benchmark ✅
k_grid matches the benchmark ✅
k_grid_sigma2_b matches the benchmark ✅
mag_bias_2d matches the benchmark ✅
nbl_3x2pt matches the benchmark ✅
nbl_3x2pt_unb matches the benchmark ✅
nbl_GC matches the benchmark ✅
nbl_WL matches the benchmark ✅
nbl_XC matches the benchmark ✅
nbl_ref matches the benchmark ✅
nz_lns matches the benchmark ✅
nz_src matches the benchmark ✅
sigma2_b matches the benchmark ✅
use_namaster matches the benchmark ✅
wf_delta matches the benchmark ✅
wf_gamma matches the benchmark ✅
wf_ia matches the benchmark ✅
wf_lensing_arr matches the benchmark ✅
wf_mu matches the benchmark ✅
z_grid matches the benchmark ✅
z_grid_trisp matches the benchmark ✅
cov WL tot = G + SSC + cNG ✅
cov WL tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅


🧪🧪🧪 Testing config_0015 🧪🧪🧪...

Keys not in common: {'wl_bins_filename', 'gc_bins_filename'}


Comparison failed for binning_type: The DType <class 'numpy._FloatAbstractDType'> could not be promoted by <class 'numpy.dtypes.StrDType'>. This means that no common DType exists for the given inputs. For example they cannot be stored in a single array unless the dtype is `object`. The full list of DTypes is: (<class 'numpy.dtypes.StrDType'>, <class 'numpy._FloatAbstractDType'>)
bnt_matrix matches the benchmark ✅
cl_3x2pt_5d matches the benchmark ✅
cl_gg_3d matches the benchmark ✅
cl_gl_3d matches the benchmark ✅
cl_ll_3d matches the benchmark ✅
cov_3x2pt_cng_2D matches the benchmark ✅
cov_3x2pt_g_2D matches the benchmark ✅
cov_3x2pt_mix_2D matches the benchmark ✅
cov_3x2pt_sn_2D matches the benchmark ✅
cov_3x2pt_ssc_2D matches the benchmark ✅
cov_3x2pt_sva_2D matches the benchmark ✅
cov_3x2pt_tot_2D matches the benchmark ✅
cov_GC_cng_2D matches the benchmark ✅
cov_GC_g_2D matches the benchmark ✅
cov_GC_mix_2D matches the benchmark ✅
cov_GC_sn_2D matches the benchmark ✅
cov_GC_ssc_2D matches the benchmark ✅
cov_GC_sva_2D matches the benchmark ✅
cov_GC_tot_2D matches the benchmark ✅
cov_WL_cng_2D matches the benchmark ✅
cov_WL_g_2D matches the benchmark ✅
cov_WL_mix_2D matches the benchmark ✅
cov_WL_sn_2D matches the benchmark ✅
cov_WL_ssc_2D matches the benchmark ✅
cov_WL_sva_2D matches the benchmark ✅
cov_WL_tot_2D matches the benchmark ✅
cov_XC_cng_2D matches the benchmark ✅
cov_XC_g_2D matches the benchmark ✅
cov_XC_mix_2D matches the benchmark ✅
cov_XC_sn_2D matches the benchmark ✅
cov_XC_ssc_2D matches the benchmark ✅
cov_XC_sva_2D matches the benchmark ✅
cov_XC_tot_2D matches the benchmark ✅
d2CGG_dVddeltab matches the benchmark ✅
d2CGL_dVddeltab matches the benchmark ✅
d2CLL_dVddeltab matches the benchmark ✅
dPgg_ddeltab matches the benchmark ✅
dPgm_ddeltab matches the benchmark ✅
dPmm_ddeltab matches the benchmark ✅
delta_l_3x2pt matches the benchmark ✅
delta_l_GC matches the benchmark ✅
delta_l_WL matches the benchmark ✅
delta_l_XC matches the benchmark ✅
delta_l_ref matches the benchmark ✅
do_sample_cov matches the benchmark ✅
ell_edges_3x2pt matches the benchmark ✅
ell_edges_GC matches the benchmark ✅
ell_edges_WL matches the benchmark ✅
ell_edges_XC matches the benchmark ✅
ell_edges_ref matches the benchmark ✅
ell_max_3x2pt matches the benchmark ✅
ell_max_3x2pt_unb matches the benchmark ✅
ell_max_GC matches the benchmark ✅
ell_max_WL matches the benchmark ✅
ell_max_XC matches the benchmark ✅
ell_max_ref matches the benchmark ✅
ell_min_3x2pt matches the benchmark ✅
ell_min_GC matches the benchmark ✅
ell_min_WL matches the benchmark ✅
ell_min_XC matches the benchmark ✅
ell_min_ref matches the benchmark ✅sys:1: UserWarning: the number of steps in the redshift grid is small, you may want to consider increasing it
   _____                       __                        
  / ___/____  ____ _________  / /_  ____  _________  ___ 
  \__ \/ __ \/ __ `/ ___/ _ \/ __ \/ __ \/ ___/ __ \/ _ \
 ___/ / /_/ / /_/ / /__/  __/ /_/ / /_/ / /  / / / /  __/
/____/ .___/\__,_/\___/\___/_.___/\____/_/  /_/ /_/\___/ 
    /_/                                                  

Generating a polar cap mask with area 13245 deg^2 and nside 1024
Angular radius of the cap: 69.0309 deg
fsky = 0.3211
Computing Cls...
done in 3.55 s
Gauss. cov. matrices computed in 0.02 s
Computing halo model probe responses...
0it [00:00, ?it/s]10it [00:00, 132.51it/s]
Package 'NPZ' is loaded.
Package 'LoopVectorization' is loaded.
Package 'YAML' is loaded.

*** Computing SSC ****
specs:
nbl: 15
zbins: 3
z_steps: 100
probe_combinations: ["LLLL", "LLGL", "LLGG", "GLGL", "GLGG", "GGGG"]
integration_type: simps
*****************

Computing SSC covariance block LL_LL
  4.238579 seconds (7.25 M allocations: 364.789 MiB, 1.18% gc time, 103.86% compilation time)
Computing SSC covariance block LL_GL
  0.002620 seconds (12 allocations: 191.234 KiB)
Computing SSC covariance block LL_GG
  0.002207 seconds (12 allocations: 127.984 KiB)
Computing SSC covariance block GL_GL
  0.004319 seconds (12 allocations: 286.234 KiB)
Computing SSC covariance block GL_GG
  0.002202 seconds (12 allocations: 191.234 KiB)
Computing SSC covariance block GG_GG
  0.002168 seconds (12 allocations: 128.016 KiB)
/u/dsciotti/code/Spaceborne/main.py:1484: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
  fig, ax = plt.subplots(1, 2, figsize=(10, 6))
Computing sigma^2_b(z_1, z_2)...
done in 0.52 s
SSC computed in 0.15 m
Including SSC in total covariance
cNG term not requested, setting it to zero
Covariance matrices computed
Covariance matrices saved in /u/dsciotti/code/Spaceborne_bench/tmp

Testing cov_3x2pt_tot_2D...

Condition number = 5.2572e+13
Cholesky decomposition successful
Numpy inversion successful.
Inverse test successfully (M @ M^{-1} is identity). atol=1e-9, rtol=1e-7
Matrix is symmetric. atol=0, rtol=1e-7
Finished in 0.30 minutes
sys:1: UserWarning: the number of steps in the redshift grid is small, you may want to consider increasing it
   _____                       __                        
  / ___/____  ____ _________  / /_  ____  _________  ___ 
  \__ \/ __ \/ __ `/ ___/ _ \/ __ \/ __ \/ ___/ __ \/ _ \
 ___/ / /_/ / /_/ / /__/  __/ /_/ / /_/ / /  / / / /  __/
/____/ .___/\__,_/\___/\___/_.___/\____/_/  /_/ /_/\___/ 
    /_/                                                  

Generating a polar cap mask with area 13245 deg^2 and nside 1024
Angular radius of the cap: 69.0309 deg
fsky = 0.3211
Computing Cls...
done in 2.73 s
Gauss. cov. matrices computed in 0.02 s
Computing halo model probe responses...
0it [00:00, ?it/s]10it [00:00, 132.95it/s]
Package 'NPZ' is loaded.
Package 'LoopVectorization' is loaded.
Package 'YAML' is loaded.

*** Computing SSC ****
specs:
nbl: 15
zbins: 3
z_steps: 100
probe_combinations: ["LLLL", "LLGL", "LLGG", "GLGL", "GLGG", "GGGG"]
integration_type: simps
*****************

Computing SSC covariance block LL_LL
  4.542463 seconds (7.25 M allocations: 364.789 MiB, 1.37% gc time, 103.46% compilation time)
Computing SSC covariance block LL_GL
  0.002584 seconds (12 allocations: 191.234 KiB)
Computing SSC covariance block LL_GG
  0.002257 seconds (12 allocations: 127.984 KiB)
Computing SSC covariance block GL_GL
  0.004303 seconds (12 allocations: 286.266 KiB)
Computing SSC covariance block GL_GG
  0.002184 seconds (12 allocations: 191.234 KiB)
Computing SSC covariance block GG_GG
  0.002138 seconds (12 allocations: 127.984 KiB)
/u/dsciotti/code/Spaceborne/main.py:1484: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
  fig, ax = plt.subplots(1, 2, figsize=(10, 6))
Computing sigma^2_b(z_1, z_2)...
done in 0.52 s
SSC computed in 0.16 m
Including SSC in total covariance
cNG term not requested, setting it to zero
Covariance matrices computed
Covariance matrices saved in /u/dsciotti/code/Spaceborne_bench/tmp

Testing cov_3x2pt_tot_2D...

Condition number = 5.2572e+13
Cholesky decomposition successful
Numpy inversion successful.
Inverse test successfully (M @ M^{-1} is identity). atol=1e-9, rtol=1e-7
Matrix is symmetric. atol=0, rtol=1e-7
Finished in 0.30 minutes

ells_3x2pt matches the benchmark ✅
ells_3x2pt_unb matches the benchmark ✅
ells_GC matches the benchmark ✅
ells_WL matches the benchmark ✅
ells_XC matches the benchmark ✅
ells_ref matches the benchmark ✅
gal_bias_2d matches the benchmark ✅
ind matches the benchmark ✅
k_grid matches the benchmark ✅
k_grid_sigma2_b matches the benchmark ✅
mag_bias_2d matches the benchmark ✅
nbl_3x2pt matches the benchmark ✅
nbl_3x2pt_unb matches the benchmark ✅
nbl_GC matches the benchmark ✅
nbl_WL matches the benchmark ✅
nbl_XC matches the benchmark ✅
nbl_ref matches the benchmark ✅
nz_lns matches the benchmark ✅
nz_src matches the benchmark ✅
sigma2_b matches the benchmark ✅
use_namaster matches the benchmark ✅
wf_delta matches the benchmark ✅
wf_gamma matches the benchmark ✅
wf_ia matches the benchmark ✅
wf_lensing_arr matches the benchmark ✅
wf_mu matches the benchmark ✅
z_grid matches the benchmark ✅
z_grid_trisp matches the benchmark ✅
cov WL tot = G + SSC + cNG ✅
cov WL tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅


🧪🧪🧪 Testing config_0016 🧪🧪🧪...

Keys not in common: {'wl_bins_filename', 'gc_bins_filename'}


Comparison failed for binning_type: The DType <class 'numpy._FloatAbstractDType'> could not be promoted by <class 'numpy.dtypes.StrDType'>. This means that no common DType exists for the given inputs. For example they cannot be stored in a single array unless the dtype is `object`. The full list of DTypes is: (<class 'numpy.dtypes.StrDType'>, <class 'numpy._FloatAbstractDType'>)
bnt_matrix matches the benchmark ✅
cl_3x2pt_5d matches the benchmark ✅
cl_gg_3d matches the benchmark ✅
cl_gl_3d matches the benchmark ✅
cl_ll_3d matches the benchmark ✅
cov_3x2pt_cng_2D matches the benchmark ✅
cov_3x2pt_g_2D matches the benchmark ✅
cov_3x2pt_ssc_2D matches the benchmark ✅
cov_3x2pt_tot_2D matches the benchmark ✅
cov_GC_cng_2D matches the benchmark ✅
cov_GC_g_2D matches the benchmark ✅
cov_GC_ssc_2D matches the benchmark ✅
cov_GC_tot_2D matches the benchmark ✅
cov_WL_cng_2D matches the benchmark ✅
cov_WL_g_2D matches the benchmark ✅
cov_WL_ssc_2D matches the benchmark ✅
cov_WL_tot_2D matches the benchmark ✅
cov_XC_cng_2D matches the benchmark ✅
cov_XC_g_2D matches the benchmark ✅
cov_XC_ssc_2D matches the benchmark ✅
cov_XC_tot_2D matches the benchmark ✅
d2CGG_dVddeltab matches the benchmark ✅
d2CGL_dVddeltab matches the benchmark ✅
d2CLL_dVddeltab matches the benchmark ✅
dPgg_ddeltab matches the benchmark ✅
dPgm_ddeltab matches the benchmark ✅
dPmm_ddeltab matches the benchmark ✅
delta_l_3x2pt matches the benchmark ✅
delta_l_GC matches the benchmark ✅
delta_l_WL matches the benchmark ✅
delta_l_XC matches the benchmark ✅
delta_l_ref matches the benchmark ✅
do_sample_cov matches the benchmark ✅
ell_edges_3x2pt matches the benchmark ✅
ell_edges_GC matches the benchmark ✅
ell_edges_WL matches the benchmark ✅
ell_edges_XC matches the benchmark ✅
ell_edges_ref matches the benchmark ✅
ell_max_3x2pt matches the benchmark ✅
ell_max_3x2pt_unb matches the benchmark ✅
ell_max_GC matches the benchmark ✅
ell_max_WL matches the benchmark ✅
ell_max_XC matches the benchmark ✅
ell_max_ref matches the benchmark ✅
ell_min_3x2pt matches the benchmark ✅
ell_min_GC matches the benchmark ✅
ell_min_WL matches the benchmark ✅
ell_min_XC matches the benchmark ✅
ell_min_ref matches the benchmark ✅
ells_3x2pt matches the benchmark ✅
ells_3x2pt_unb matches the benchmark ✅
ells_GC matches the benchmark ✅
ells_WL matches the benchmark ✅
ells_XC matches the benchmark ✅
ells_ref matches the benchmark ✅
gal_bias_2d matches the benchmark ✅
ind matches the benchmark ✅
k_grid matches the benchmark ✅
k_grid_sigma2_b matches the benchmark ✅
mag_bias_2d matches the benchmark ✅
nbl_3x2pt matches the benchmark ✅
nbl_3x2pt_unb matches the benchmark ✅
nbl_GC matches the benchmark ✅
nbl_WL matches the benchmark ✅
nbl_XC matches the benchmark ✅
nbl_ref matches the benchmark ✅
nz_lns matches the benchmark ✅
nz_src matches the benchmark ✅
sigma2_b matches the benchmark ✅
use_namaster matches the benchmark ✅
wf_delta matches the benchmark ✅
wf_gamma matches the benchmark ✅
wf_ia matches the benchmark ✅
wf_lensing_arr matches the benchmark ✅
wf_mu matches the benchmark ✅
z_grid matches the benchmark ✅
z_grid_trisp matches the benchmark ✅
cov WL tot = G + SSC + cNG ✅
cov WL tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅


🧪🧪🧪 Testing config_0017 🧪🧪🧪...

Keys not in common: {'wl_bins_filename', 'gc_bins_filename'}


Comparison failed for binning_type: The DType <class 'numpy._FloatAbstractDType'> could not be promoted by <class 'numpy.dtypes.StrDType'>. This means that no common DType exists for the given inputs. For example they cannot be stored in a single array unless the dtype is `object`. The full list of DTypes is: (<class 'numpy.dtypes.StrDType'>, <class 'numpy._FloatAbstractDType'>)
bnt_matrix matches the benchmark ✅
cl_3x2pt_5d matches the benchmark ✅
cl_gg_3d matches the benchmark ✅
cl_gl_3d matches the benchmark ✅
cl_ll_3d matches the benchmark ✅
cov_3x2pt_cng_2D matches the benchmark ✅
cov_3x2pt_g_2D matches the benchmark ✅
cov_3x2pt_ssc_2D matches the benchmark ✅
cov_3x2pt_tot_2D matches the benchmark ✅
cov_GC_cng_2D matches the benchmark ✅
cov_GC_g_2D matches the benchmark ✅
cov_GC_ssc_2D matches the benchmark ✅
cov_GC_tot_2D matches the benchmark ✅
cov_WL_cng_2D matches the benchmark ✅
cov_WL_g_2D matches the benchmark ✅
cov_WL_ssc_2D matches the benchmark ✅
cov_WL_tot_2D matches the benchmark ✅
cov_XC_cng_2D matches the benchmark ✅
cov_XC_g_2D matches the benchmark ✅
cov_XC_ssc_2D matches the benchmark ✅
cov_XC_tot_2D matches the benchmark ✅
d2CGG_dVddeltab matches the benchmark ✅
d2CGL_dVddeltab matches the benchmark ✅
d2CLL_dVddeltab matches the benchmark ✅
dPgg_ddeltab matches the benchmark ✅
dPgm_ddeltab matches the benchmark ✅
dPmm_ddeltab matches the benchmark ✅
delta_l_3x2pt matches the benchmark ✅
delta_l_GC matches the benchmark ✅
delta_l_WL matches the benchmark ✅
delta_l_XC matches the benchmark ✅
delta_l_ref matches the benchmark ✅
do_sample_cov matches the benchmark ✅
ell_edges_3x2pt matches the benchmark ✅
ell_edges_GC matches the benchmark ✅
ell_edges_WL matches the benchmark ✅
ell_edges_XC matches the benchmark ✅
ell_edges_ref matches the benchmark ✅
ell_max_3x2pt matches the benchmark ✅
ell_max_3x2pt_unb matches the benchmark ✅
ell_max_GC matches the benchmark ✅
ell_max_WL matches the benchmark ✅
ell_max_XC matches the benchmark ✅
ell_max_ref matches the benchmark ✅
ell_min_3x2pt matches the benchmark ✅
ell_min_GC matches the benchmark ✅
ell_min_WL matches the benchmark ✅
ell_min_XC matches the benchmark ✅
ell_min_ref matches the benchmark ✅
ells_3x2pt matches the benchmark ✅
ells_3x2pt_unb matches the benchmark ✅
ells_GC matches the benchmark ✅
ells_WL matches the benchmark ✅
ells_XC matches the benchmark ✅
ells_ref matches the benchmark ✅
gal_bias_2d matches the benchmark ✅
ind matches the benchmark ✅
k_grid matches the benchmark ✅
k_grid_sigma2_b matches the benchmark ✅
mag_bias_2d matches the benchmark ✅
nbl_3x2pt matches the benchmark ✅
nbl_3x2pt_unb matches the benchmark ✅
nbl_GC matches the benchmark ✅
nbl_WL matches the benchmark ✅
nbl_XC matches the benchmark ✅
nbl_ref matches the benchmark ✅
nz_lns matches the benchmark ✅
nz_src matches the benchmark ✅
sigma2_b matches the benchmark ✅
use_namaster matches the benchmark ✅
wf_delta matches the benchmark ✅
wf_gamma matches the benchmark ✅
wf_ia matches the benchmark ✅
wf_lensing_arr matches the benchmark ✅
wf_mu matches the benchmark ✅
z_grid matches the benchmark ✅
z_grid_trisp matches the benchmark ✅
cov WL tot = G + SSC + cNG ✅sys:1: UserWarning: the number of steps in the redshift grid is small, you may want to consider increasing it
   _____                       __                        
  / ___/____  ____ _________  / /_  ____  _________  ___ 
  \__ \/ __ \/ __ `/ ___/ _ \/ __ \/ __ \/ ___/ __ \/ _ \
 ___/ / /_/ / /_/ / /__/  __/ /_/ / /_/ / /  / / / /  __/
/____/ .___/\__,_/\___/\___/_.___/\____/_/  /_/ /_/\___/ 
    /_/                                                  

Generating a polar cap mask with area 13245 deg^2 and nside 1024
Angular radius of the cap: 69.0309 deg
fsky = 0.3211
Computing Cls...
done in 2.81 s
Gauss. cov. matrices computed in 0.02 s
cNG trispectrum: z points = 10, k points = 20
Computing cNG trispectrum, probe combination LLLL
done in 0.09 m
Computing cNG trispectrum, probe combination LLGL
done in 0.09 m
Computing cNG trispectrum, probe combination LLGG
done in 0.09 m
Computing cNG trispectrum, probe combination GLGL
done in 0.09 m
Computing cNG trispectrum, probe combination GLGG
done in 0.09 m
Computing cNG trispectrum, probe combination GGGG
done in 0.09 m
CCL 3x2pt cov: computing probe combination  ('L', 'L', 'L', 'L')
  0%|          | 0/6 [00:00<?, ?it/s] 83%|████████▎ | 5/6 [00:00<00:00, 45.68it/s]100%|██████████| 6/6 [00:00<00:00, 49.22it/s]
cNG computed with pyccl in 0 min
CCL 3x2pt cov: computing probe combination  ('L', 'L', 'G', 'L')
  0%|          | 0/6 [00:00<?, ?it/s] 50%|█████     | 3/6 [00:00<00:00, 25.78it/s]100%|██████████| 6/6 [00:00<00:00, 22.38it/s]100%|██████████| 6/6 [00:00<00:00, 22.82it/s]
cNG computed with pyccl in 0 min
CCL 3x2pt cov: computing probe combination  ('L', 'L', 'G', 'G')
  0%|          | 0/6 [00:00<?, ?it/s]100%|██████████| 6/6 [00:00<00:00, 47.84it/s]100%|██████████| 6/6 [00:00<00:00, 47.78it/s]
cNG computed with pyccl in 0 min
CCL 3x2pt cov: computing probe combination  ('G', 'L', 'G', 'L')
  0%|          | 0/9 [00:00<?, ?it/s] 56%|█████▌    | 5/9 [00:00<00:00, 43.09it/s]100%|██████████| 9/9 [00:00<00:00, 61.13it/s]
cNG computed with pyccl in 0 min
CCL 3x2pt cov: computing probe combination  ('G', 'L', 'G', 'G')
  0%|          | 0/9 [00:00<?, ?it/s] 67%|██████▋   | 6/9 [00:00<00:00, 47.88it/s]100%|██████████| 9/9 [00:00<00:00, 53.25it/s]
cNG computed with pyccl in 0 min
CCL 3x2pt cov: computing probe combination  ('G', 'G', 'G', 'G')
  0%|          | 0/6 [00:00<?, ?it/s]100%|██████████| 6/6 [00:00<00:00, 79.66it/s]
/u/dsciotti/code/Spaceborne/main.py:1484: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
  fig, ax = plt.subplots(1, 2, figsize=(10, 6))
cNG computed with pyccl in 0 min
CCL 3x2pt cov: filling probe combination ('G', 'G', 'L', 'L') by symmetry
CCL 3x2pt cov: filling probe combination ('G', 'G', 'G', 'L') by symmetry
CCL 3x2pt cov: filling probe combination ('G', 'L', 'L', 'L') by symmetry
Probe combination: ('G', 'L', 'G', 'L')

Not equal to tolerance rtol=0.1, atol=0
cov_ng_2D ('G', 'L', 'G', 'L') is not symmetric in ell1, ell2
Mismatched elements: 2 / 18225 (0.011%)
Max absolute difference: 1.90175798e-23
Max relative difference: 0.22897114
 x: array([[1.498294e-18, 2.636744e-18, 3.131050e-18, ..., 2.034272e-29,
        1.243368e-27, 3.038896e-27],
       [2.636744e-18, 4.773408e-18, 5.711007e-18, ..., 1.243368e-27,...
 y: array([[1.498294e-18, 2.636744e-18, 3.131050e-18, ..., 2.034272e-29,
        1.243368e-27, 3.038896e-27],
       [2.636744e-18, 4.773408e-18, 5.711007e-18, ..., 1.243368e-27,...
SSC not requested, setting it to zero
Including cNG in total covariance
Covariance matrices computed
Covariance matrices saved in /u/dsciotti/code/Spaceborne_bench/tmp

Testing cov_3x2pt_tot_2D...

Condition number = 5.2733e+13
Cholesky decomposition failed. Consider checking the condition number or symmetry.
Numpy inversion successful.
Inverse test successfully (M @ M^{-1} is identity). atol=1e-9, rtol=1e-7
Warning: Matrix is not symmetric. atol=0, rtol=1e-7
Finished in 0.68 minutes

cov WL tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅


🧪🧪🧪 Testing config_0018 🧪🧪🧪...

Keys not in common: {'wl_bins_filename', 'gc_bins_filename'}


Comparison failed for binning_type: The DType <class 'numpy._FloatAbstractDType'> could not be promoted by <class 'numpy.dtypes.StrDType'>. This means that no common DType exists for the given inputs. For example they cannot be stored in a single array unless the dtype is `object`. The full list of DTypes is: (<class 'numpy.dtypes.StrDType'>, <class 'numpy._FloatAbstractDType'>)
bnt_matrix matches the benchmark ✅
cl_3x2pt_5d matches the benchmark ✅
cl_gg_3d matches the benchmark ✅
cl_gl_3d matches the benchmark ✅
cl_ll_3d matches the benchmark ✅
cov_3x2pt_cng_2D matches the benchmark ✅
cov_3x2pt_g_2D matches the benchmark ✅
cov_3x2pt_ssc_2D matches the benchmark ✅
cov_3x2pt_tot_2D matches the benchmark ✅
cov_GC_cng_2D matches the benchmark ✅
cov_GC_g_2D matches the benchmark ✅
cov_GC_ssc_2D matches the benchmark ✅
cov_GC_tot_2D matches the benchmark ✅
cov_WL_cng_2D matches the benchmark ✅
cov_WL_g_2D matches the benchmark ✅
cov_WL_ssc_2D matches the benchmark ✅
cov_WL_tot_2D matches the benchmark ✅
cov_XC_cng_2D matches the benchmark ✅
cov_XC_g_2D matches the benchmark ✅
cov_XC_ssc_2D matches the benchmark ✅
cov_XC_tot_2D matches the benchmark ✅
d2CGG_dVddeltab matches the benchmark ✅
d2CGL_dVddeltab matches the benchmark ✅
d2CLL_dVddeltab matches the benchmark ✅
dPgg_ddeltab matches the benchmark ✅
dPgm_ddeltab matches the benchmark ✅
dPmm_ddeltab matches the benchmark ✅
delta_l_3x2pt matches the benchmark ✅
delta_l_GC matches the benchmark ✅
delta_l_WL matches the benchmark ✅
delta_l_XC matches the benchmark ✅
delta_l_ref matches the benchmark ✅
do_sample_cov matches the benchmark ✅
ell_edges_3x2pt matches the benchmark ✅
ell_edges_GC matches the benchmark ✅
ell_edges_WL matches the benchmark ✅
ell_edges_XC matches the benchmark ✅
ell_edges_ref matches the benchmark ✅
ell_max_3x2pt matches the benchmark ✅
ell_max_3x2pt_unb matches the benchmark ✅
ell_max_GC matches the benchmark ✅
ell_max_WL matches the benchmark ✅
ell_max_XC matches the benchmark ✅
ell_max_ref matches the benchmark ✅
ell_min_3x2pt matches the benchmark ✅
ell_min_GC matches the benchmark ✅
ell_min_WL matches the benchmark ✅
ell_min_XC matches the benchmark ✅
ell_min_ref matches the benchmark ✅
ells_3x2pt matches the benchmark ✅
ells_3x2pt_unb matches the benchmark ✅
ells_GC matches the benchmark ✅
ells_WL matches the benchmark ✅
ells_XC matches the benchmark ✅
ells_ref matches the benchmark ✅
gal_bias_2d matches the benchmark ✅
ind matches the benchmark ✅
k_grid matches the benchmark ✅
k_grid_sigma2_b matches the benchmark ✅
mag_bias_2d matches the benchmark ✅
nbl_3x2pt matches the benchmark ✅
nbl_3x2pt_unb matches the benchmark ✅
nbl_GC matches the benchmark ✅
nbl_WL matches the benchmark ✅
nbl_XC matches the benchmark ✅
nbl_ref matches the benchmark ✅
nz_lns matches the benchmark ✅
nz_src matches the benchmark ✅
sigma2_b matches the benchmark ✅
use_namaster matches the benchmark ✅
wf_delta matches the benchmark ✅
wf_gamma matches the benchmark ✅
wf_ia matches the benchmark ✅
wf_lensing_arr matches the benchmark ✅
wf_mu matches the benchmark ✅
z_grid matches the benchmark ✅
z_grid_trisp matches the benchmark ✅
cov WL tot = G + SSC + cNG ✅
cov WL tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov GC tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅
cov 3x2pt tot = G + SSC + cNG ✅
Done.
